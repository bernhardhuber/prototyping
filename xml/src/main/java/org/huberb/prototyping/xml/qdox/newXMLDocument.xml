<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2022 berni3.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->



<root>
    <source>
        <url>
            file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/main/java/org/huberb/prototyping/xml/qdox/XmlModelWriter.java</url>
        <package>
            <commentHeader>
            </commentHeader>
            <name>org.huberb.prototyping.xml.qdox</name>
        </package>
        <imports>
            <import>
                <name>com.thoughtworks.qdox.model.DocletTag</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaAnnotatedElement</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaAnnotation</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaClass</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaConstructor</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaField</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaInitializer</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaMethod</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaModule</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaModuleDescriptor</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaExports</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaOpens</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaProvides</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaRequires</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaUses</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaPackage</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaParameter</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaSource</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.JavaType</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.expression.AnnotationValue</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.model.expression.Expression</name>
            </import>

            <import>
                <name>com.thoughtworks.qdox.writer.ModelWriter</name>
            </import>

            <import>
                <name>java.util.Collection</name>
            </import>

            <import>
                <name>java.util.Iterator</name>
            </import>

            <import>
                <name>java.util.List</name>
            </import>

            <import>
                <name>java.util.ListIterator</name>
            </import>

            <import>
                <name>java.util.Map</name>
            </import>


        </imports>
        <class>
            <commentHeader>
                /**
                * @author berni3
                */
            </commentHeader>
            <accessibilityModifier>public </accessibilityModifier>
            <nonAccessibilityModifiers></nonAccessibilityModifiers>
            <class >
                <name>XmlModelWriter</name>
            </class >
            implements com.thoughtworks.qdox.writer.ModelWriter
            <classbody>
                {

                <field>
                    <commentHeader></commentHeader>
                    <allModifiers>private </allModifiers>
                    org.huberb.prototyping.xml.qdox.XmlIndentBuffer buffer = new XmlIndentBuffer();
                </field>

                <method>
                    <commentHeader>
                        /**
                        * All information is written to this buffer. When extending this class you
                        * should write to this buffer
                        *
                        * @return the buffer
                        */
                    </commentHeader>
                    <accessibilityModifier>protected</accessibilityModifier>
                    <nonAccessibilityModifiers>final</nonAccessibilityModifiers>
                    org.huberb.prototyping.xml.qdox.XmlIndentBuffer getBuffer() {					
                    return buffer;
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>public </accessibilityModifier>
                    <nonAccessibilityModifiers></nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeSource(
                    <parameter>
                        <commentHeader></commentHeader>
                        com.thoughtworks.qdox.model.JavaSource source</parameter>
                    ) {
					

                    buffer.writeStartElement("source");

                    buffer.writeStartElement("url");
                    buffer.write(source.getURL().toString());
                    buffer.writeEndElement("url");

                    // package statement
                    writePackage(source.getPackage());

                    // import statement
                    buffer.writeStartElement("imports");
                    for (String imprt : source.getImports()) {
                    buffer.writeStartElement("import");
                    buffer.writeStartElement("name");
                    buffer.write(imprt);
                    buffer.writeEndElement("name");
                    buffer.writeEndElement("import");
                    buffer.newline();
                    }
                    if (source.getImports().size() > 0) {
                    buffer.newline();
                    }
                    buffer.writeEndElement("imports");

                    // classes
                    for (ListIterator JavaClass iter = source.getClasses().listIterator(); iter.hasNext();) {
                    JavaClass cls = iter.next();
                    writeClass(cls);
                    if (iter.hasNext()) {
                    buffer.newline();
                    }
                    }
                    buffer.writeEndElement("source");
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>
                        public </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writePackage(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaPackage pckg</parameter>
                    ) {
					
                    buffer.writeStartElement("package");
                    if (pckg != null) {
                    commentHeader(pckg);
                    //buffer.write("package ");
                    buffer.writeStartElement("name");
                    buffer.write(pckg.getName());
                    //buffer.write(';');
                    buffer.writeEndElement("name");
                    buffer.newline();
                    buffer.newline();
                    }
                    buffer.writeEndElement("package");
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>
                        public </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeClass(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaClass cls</parameter>
                    ) {
					
                    buffer.writeStartElement("class");
                    commentHeader(cls);

                    writeAccessibilityModifier(cls.getModifiers());
                    writeNonAccessibilityModifiers(cls.getModifiers());

                    final String typeOf = cls.isEnum() ? "enum "
                    : cls.isInterface() ? "interface "
                    : cls.isAnnotation() ? "@interface "
                    : "class ";
                    buffer.writeStartElement(typeOf);
                    buffer.writeStartElement("name");
                    buffer.write(cls.getName());
                    buffer.writeEndElement("name");
                    buffer.writeEndElement(typeOf);

                    // subclass
                    if (cls.getSuperClass() != null) {
                    String className = cls.getSuperClass().getFullyQualifiedName();
                    if (!"java.lang.Object".equals(className) &amp;&amp; !"java.lang.Enum".equals(className)) {
                    buffer.write(" extends ");
                    buffer.write(cls.getSuperClass().getGenericCanonicalName());
                    }
                    }

                    // implements
                    if (cls.getImplements().size() > 0) {
                    buffer.write(cls.isInterface() ? " extends " : " implements ");

                    for (ListIterator&lt;JavaType&lt; iter = cls.getImplements().listIterator(); iter.hasNext();) {
                    buffer.write(iter.next().getGenericCanonicalName());
                    if (iter.hasNext()) {
                    buffer.write(", ");
                    }
                    }
                    }

                    writeClassBody(cls);
                    buffer.writeEndElement("class");
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                    </commentHeader>
                    <accessibilityModifier>
                        private </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeClassBody(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaClass cls</parameter>
                    ) {
					
                    buffer.writeStartElement("classbody");

                    buffer.write(" {");
                    buffer.newline();
                    buffer.indent();

                    // fields
                    for (JavaField javaField : cls.getFields()) {
                    buffer.newline();
                    writeField(javaField);
                    }

                    // constructors
                    for (JavaConstructor javaConstructor : cls.getConstructors()) {
                    buffer.newline();
                    writeConstructor(javaConstructor);
                    }

                    // methods
                    for (JavaMethod javaMethod : cls.getMethods()) {
                    buffer.newline();
                    writeMethod(javaMethod);
                    }

                    // inner-classes
                    for (JavaClass innerCls : cls.getNestedClasses()) {
                    buffer.newline();
                    writeClass(innerCls);
                    }

                    buffer.deindent();
                    buffer.newline();
                    buffer.write('}');
                    buffer.newline();
                    buffer.writeEndElement("classbody");
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>public</accessibilityModifier>
                    <nonAccessibilityModifiers></nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeInitializer(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaInitializer init</parameter>
                    ) {
					
                    buffer.writeStartElement("initializer");
                    if (init.isStatic()) {
                    buffer.write("static ");
                    }
                    buffer.write('{');
                    buffer.newline();
                    buffer.indent();

                    buffer.write(init.getBlockContent());

                    buffer.deindent();
                    buffer.newline();
                    buffer.write('}');
                    buffer.newline();
                    buffer.writeEndElement("initializer");
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>
                        public </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeField(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaField field</parameter>
                    ) {
					
                    buffer.writeStartElement("field");
                    commentHeader(field);

                    writeAllModifiers(field.getModifiers());
                    if (!field.isEnumConstant()) {
                    buffer.write(field.getType().getGenericCanonicalName());
                    buffer.write(' ');
                    }
                    buffer.write(field.getName());

                    if (field.isEnumConstant()) {
                    if (field.getEnumConstantArguments() != null &amp;&amp; !field.getEnumConstantArguments().isEmpty()) {
                    buffer.write("( ");
                    for (Iterator&lt;Expression> iter = field.getEnumConstantArguments().listIterator(); iter.hasNext();) {
                    buffer.write(iter.next().getParameterValue().toString());
                    if (iter.hasNext()) {
                    buffer.write(", ");
                    }
                    }
                    buffer.write(" )");
                    }
                    if (field.getEnumConstantClass() != null) {
                    writeClassBody(field.getEnumConstantClass());
                    }
                    } else {
                    if (field.getInitializationExpression() != null &amp;&amp; field.getInitializationExpression().length() > 0) {
                    {
                    buffer.write(" = ");
                    }
                    buffer.write(field.getInitializationExpression());
                    }
                    }
                    buffer.write(';');
                    buffer.newline();
                    buffer.writeEndElement("field");
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>
                        public </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeConstructor(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaConstructor constructor</parameter>
                    ) {
					
                    buffer.writeStartElement("constructor");

                    commentHeader(constructor);
                    writeAllModifiers(constructor.getModifiers());

                    buffer.write(constructor.getName());
                    buffer.write('(');
                    for (ListIterator&lt;JavaParameter> iter = constructor.getParameters().listIterator(); iter.hasNext();) {
                    writeParameter(iter.next());
                    if (iter.hasNext()) {
                    buffer.write(", ");
                    }
                    }
                    buffer.write(')');

                    if (constructor.getExceptions().size() > 0) {
                    buffer.write(" throws ");
                    for (Iterator&lt;JavaClass> excIter = constructor.getExceptions().iterator(); excIter.hasNext();) {
                    buffer.write(excIter.next().getGenericCanonicalName());
                    if (excIter.hasNext()) {
                    buffer.write(", ");
                    }
                    }
                    }

                    buffer.write(" {");
                    buffer.newline();
                    if (constructor.getSourceCode() != null) {
                    buffer.write(constructor.getSourceCode());
                    }
                    buffer.write('}');
                    buffer.newline();
                    buffer.writeEndElement("constructor");
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>
                        public </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeMethod(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaMethod method</parameter>
                    ) {
					
                    buffer.writeStartElement("method");
                    commentHeader(method);
                    writeAccessibilityModifier(method.getModifiers());
                    writeNonAccessibilityModifiers(method.getModifiers());
                    buffer.write(method.getReturnType().getGenericCanonicalName());
                    buffer.write(' ');
                    buffer.write(method.getName());
                    buffer.write('(');
                    for (ListIterator&lt;JavaParameter> iter = method.getParameters().listIterator(); iter.hasNext();) {
                    writeParameter(iter.next());
                    if (iter.hasNext()) {
                    buffer.write(", ");
                    }

                    }
                    buffer.write(')');
                    if (method.getExceptions().size() > 0) {
                    buffer.write(" throws ");
                    for (Iterator&lt;JavaClass> excIter = method.getExceptions().iterator(); excIter.hasNext();) {
                    buffer.write(excIter.next().getGenericCanonicalName());
                    if (excIter.hasNext()) {
                    buffer.write(", ");
                    }
                    }
                    }
                    if (method.getSourceCode() != null &amp;&amp; method.getSourceCode().length() > 0) {
                    buffer.write(" {");
                    buffer.newline();
                    buffer.write(method.getSourceCode());
                    buffer.write('}');
                    buffer.newline();
                    } else {
                    buffer.write(';');
                    buffer.newline();
                    }
                    buffer.writeEndElement("method");
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                    </commentHeader>
                    <accessibilityModifier>
                        private </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    void writeNonAccessibilityModifiers(<parameter>
                        <commentHeader>
                        </commentHeader>
                        java.util.Collection&lt;java.lang.String> modifiers</parameter>
                    ) {
					
                    buffer.writeStartElement("nonAccessibilityModifiers");

                    for (String modifier : modifiers) {
                    if (!modifier.startsWith("p")) {
                    buffer.write(modifier);
                    buffer.write(' ');
                    }
                    }
                    buffer.writeEndElement("nonAccessibilityModifiers");
                    }
                </method>

                <method>
                    <commentHeader>
                    </commentHeader>
                    <accessibilityModifier>
                        private </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    void writeAccessibilityModifier(<parameter>
                        <commentHeader>
                        </commentHeader>
                        java.util.Collection&lt;java.lang.String> modifiers</parameter>
                    ) {
					
                    buffer.writeStartElement("accessibilityModifier");
                    for (String modifier : modifiers) {
                    if (modifier.startsWith("p")) {
                    buffer.write(modifier);
                    buffer.write(' ');
                    }
                    }
                    buffer.writeEndElement("accessibilityModifier");
                    }
                </method>

                <method>
                    <commentHeader>
                    </commentHeader>
                    <accessibilityModifier>
                        private </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    void writeAllModifiers(<parameter>
                        <commentHeader>
                        </commentHeader>
                        java.util.List&lt;java.lang.String> modifiers</parameter>
                    ) {
					
                    buffer.writeStartElement("allModifiers");
                    for (String modifier : modifiers) {
                    buffer.write(modifier);
                    buffer.write(' ');
                    }
                    buffer.writeEndElement("allModifiers");
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>
                        public </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeAnnotation(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaAnnotation annotation</parameter>
                    ) {
					
                    buffer.writeStartElement("annotation");

                    buffer.write('@');
                    buffer.write(annotation.getType().getGenericCanonicalName());
                    if (!annotation.getPropertyMap().isEmpty()) {
                    buffer.indent();
                    buffer.write('(');
                    Iterator&lt;Map.Entry&lt;String, AnnotationValue>> iterator = annotation.getPropertyMap().entrySet().iterator();
                    while (iterator.hasNext()) {
                    Map.Entry&lt;String, AnnotationValue> entry = iterator.next();
                    buffer.write(entry.getKey());
                    buffer.write('=');
                    buffer.write(entry.getValue().toString());
                    if (iterator.hasNext()) {
                    buffer.write(',');
                    buffer.newline();
                    }
                    }
                    buffer.write(')');
                    buffer.deindent();
                    }
                    buffer.newline();
                    buffer.writeEndElement("annotation");
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>
                        public </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeParameter(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaParameter parameter</parameter>
                    ) {
					
                    buffer.writeStartElement("parameter");
                    commentHeader(parameter);
                    buffer.write(parameter.getGenericCanonicalName());
                    if (parameter.isVarArgs()) {
                    buffer.write("...");
                    }
                    buffer.write(' ');
                    buffer.write(parameter.getName());
                    buffer.writeEndElement("parameter");
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                    </commentHeader>
                    <accessibilityModifier>
                        protected </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    void commentHeader(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaAnnotatedElement entity</parameter>
                    ) {
					
                    buffer.writeStartElement("commentHeader");
                    if (entity.getComment() != null || (entity.getTags().size() > 0)) {
                    buffer.write("/**");
                    buffer.newline();

                    if (entity.getComment() != null &amp;&amp; entity.getComment().length() > 0) {
                    buffer.write(" * ");

                    buffer.write(entity.getComment().replaceAll("\n", "\n * "));

                    buffer.newline();
                    }

                    if (entity.getTags().size() > 0) {
                    if (entity.getComment() != null &amp;&amp; entity.getComment().length() > 0) {
                    buffer.write(" *");
                    buffer.newline();
                    }
                    for (DocletTag docletTag : entity.getTags()) {
                    buffer.write(" * @");
                    buffer.write(docletTag.getName());
                    if (docletTag.getValue().length() > 0) {
                    buffer.write(' ');
                    buffer.write(docletTag.getValue());
                    }
                    buffer.newline();
                    }
                    }

                    buffer.write(" */");
                    buffer.newline();
                    }
                    buffer.writeEndElement("commentHeader");

                    if (entity.getAnnotations() != null) {
                    for (JavaAnnotation annotation : entity.getAnnotations()) {
                    writeAnnotation(annotation);
                    }
                    }
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>
                        public </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeModuleDescriptor(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaModuleDescriptor descriptor</parameter>
                    ) {
					
                    if (descriptor.isOpen()) {
                    buffer.write("open ");
                    }
                    buffer.write("module " + descriptor.getName() + " {");
                    buffer.newline();
                    buffer.indent();

                    for (JavaRequires requires : descriptor.getRequires()) {
                    buffer.newline();
                    writeModuleRequires(requires);
                    }

                    for (JavaExports exports : descriptor.getExports()) {
                    buffer.newline();
                    writeModuleExports(exports);
                    }

                    for (JavaOpens opens : descriptor.getOpens()) {
                    buffer.newline();
                    writeModuleOpens(opens);
                    }

                    for (JavaProvides provides : descriptor.getProvides()) {
                    buffer.newline();
                    writeModuleProvides(provides);
                    }

                    for (JavaUses uses : descriptor.getUses()) {
                    buffer.newline();
                    writeModuleUses(uses);
                    }

                    buffer.newline();
                    buffer.deindent();
                    buffer.write('}');
                    buffer.newline();
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>
                        public </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeModuleExports(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaExports exports</parameter>
                    ) {
					
                    buffer.write("exports ");
                    buffer.write(exports.getSource().getName());
                    if (!exports.getTargets().isEmpty()) {
                    buffer.write(" to ");
                    Iterator&lt;JavaModule> targets = exports.getTargets().iterator();
                    while (targets.hasNext()) {
                    JavaModule target = targets.next();
                    buffer.write(target.getName());
                    if (targets.hasNext()) {
                    buffer.write(", ");
                    }
                    }
                    }
                    buffer.write(';');
                    buffer.newline();
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>
                        public </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeModuleOpens(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaOpens opens</parameter>
                    ) {
					
                    buffer.write("opens ");
                    buffer.write(opens.getSource().getName());
                    if (!opens.getTargets().isEmpty()) {
                    buffer.write(" to ");
                    Iterator&lt;JavaModule> targets = opens.getTargets().iterator();
                    while (targets.hasNext()) {
                    JavaModule target = targets.next();
                    buffer.write(target.getName());
                    if (targets.hasNext()) {
                    buffer.write(", ");
                    }
                    }
                    }
                    buffer.write(';');
                    buffer.newline();
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>
                        public </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeModuleProvides(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaProvides provides</parameter>
                    ) {
					
                    buffer.write("provides ");
                    buffer.write(provides.getService().getName());
                    buffer.write(" with ");
                    Iterator&lt;JavaClass> providers = provides.getProviders().iterator();
                    while (providers.hasNext()) {
                    JavaClass provider = providers.next();
                    buffer.write(provider.getName());
                    if (providers.hasNext()) {
                    buffer.write(", ");
                    }
                    }
                    buffer.write(';');
                    buffer.newline();
                    return null;
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>
                        public </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeModuleRequires(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaRequires requires</parameter>
                    ) {
					
                    buffer.write("requires ");
                    writeAccessibilityModifier(requires.getModifiers());
                    writeNonAccessibilityModifiers(requires.getModifiers());
                    buffer.write(requires.getModule().getName());
                    buffer.write(';');
                    buffer.newline();
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                        /**
                        * {@inheritDoc}
                        */
                    </commentHeader>
                    <accessibilityModifier>
                        public </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    com.thoughtworks.qdox.writer.ModelWriter writeModuleUses(<parameter>
                        <commentHeader>
                        </commentHeader>
                        com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaUses uses</parameter>
                    ) {
					
                    buffer.write("uses ");
                    buffer.write(uses.getService().getName());
                    buffer.write(';');
                    buffer.newline();
                    return this;
                    }
                </method>

                <method>
                    <commentHeader>
                    </commentHeader>
                    <annotation>
                        @java.lang.Override
                    </annotation>
                    <accessibilityModifier>
                        public </accessibilityModifier>
                    <nonAccessibilityModifiers>
                    </nonAccessibilityModifiers>
                    java.lang.String toString() {
					
                    return buffer.toString();
                    }
                </method>

                }
            </classbody>
        </class>
    </source>
    
    
    <source url="file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/test/java/org/huberb/prototyping/xml/qdox/XmlSaxModelWriterTest.java">
        <packages>
            <package name="org.huberb.prototyping.xml.qdox"/>
        </packages>
        <imports>
            <import name="com.thoughtworks.qdox.JavaProjectBuilder"/>
            <import name="com.thoughtworks.qdox.model.JavaPackage"/>
            <import name="com.thoughtworks.qdox.model.JavaSource"/>
            <import name="com.thoughtworks.qdox.writer.ModelWriter"/>
            <import name="java.io.File"/>
            <import name="java.util.Collection"/>
            <import name="java.util.Iterator"/>
            <import name="javax.xml.stream.XMLStreamException"/>
            <import name="org.junit.jupiter.api.Test"/>
        </imports>
        <class>
            <typeOf name="class "/>
        </class>
    </source>
    
    <source url="file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/test/java/org/huberb/prototyping/xml/qdox/XmlSaxWriterTest.java">
        <packages>
            <package name="org.huberb.prototyping.xml.qdox"/>
        </packages>
        <imports>
            <import name="java.io.IOException"/>
            <import name="java.io.StringWriter"/>
            <import name="javax.xml.stream.XMLStreamException"/>
            <import name="org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlModelSaxWriterFactory"/>
            <import name="org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumer"/>
            <import name="org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumerTemplates"/>
            <import name="static org.junit.jupiter.api.Assertions.assertAll"/>
            <import name="static org.junit.jupiter.api.Assertions.assertEquals"/>
            <import name="static org.junit.jupiter.api.Assertions.assertTrue"/>
            <import name="org.junit.jupiter.api.Test"/>
        </imports>
        <class>
            <typeOf name="class "/>
        </class>
    </source>
    
    <source url="file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/test/java/org/huberb/prototyping/xml/trang/DriverTest.java">
        <packages>
            <package name="org.huberb.prototyping.xml.trang"/>
        </packages>
        <imports>
            <import name="com.thaiopensource.relaxng.translate.Driver"/>
            <import name="com.thaiopensource.xml.sax.ErrorHandlerImpl"/>
            <import name="java.io.StringWriter"/>
            <import name="static org.junit.jupiter.api.Assertions.assertEquals"/>
            <import name="org.junit.jupiter.api.Test"/>
        </imports>
        <class>
            <typeOf name="class "/>
        </class>
    </source>

</root>
