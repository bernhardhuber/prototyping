<root>
    <source>
        <url>file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/main/java/org/huberb/prototyping/xml/qdox/IGenericXmlEmitter.java</url>
        <package>
            <comment-header></comment-header>
            <annotations></annotations>
            <name>org.huberb.prototyping.xml.qdox</name>
        </package>
        <imports></imports>
        <classes>
            <class>
                <comment-header>
                    <doclets>
                        <doclet>
                            <name>author</name>
                            <value>berni3</value>
                        </doclet>
                    </doclets>
                </comment-header>
                <annotations></annotations>
                <modifiers>
                    <modifier>public</modifier>
                </modifiers>
                <interface>
                    <name>IGenericXmlEmitter</name>
                </interface>
                <classbody>
                    <fields></fields>
                    <constructors></constructors>
                    <methods>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>newline</name>
                            <parameters></parameters>
                            <source></source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <return-type>void</return-type>
                            <name>startDocument</name>
                            <parameters></parameters>
                            <source></source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <return-type>void</return-type>
                            <name>endDocument</name>
                            <parameters></parameters>
                            <source></source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <return-type>void</return-type>
                            <name>write</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[char]]&gt;</canonical-name>
                                    <name>c</name>
                                </parameter>
                            </parameters>
                            <source></source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <return-type>void</return-type>
                            <name>write</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>s</name>
                                </parameter>
                            </parameters>
                            <source></source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <return-type>void</return-type>
                            <name>writeStartElement</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>elementname</name>
                                </parameter>
                            </parameters>
                            <source></source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <return-type>void</return-type>
                            <name>writeEndElement</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>elementname</name>
                                </parameter>
                            </parameters>
                            <source></source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <return-type>void</return-type>
                            <name>writeInlineElement</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>elementname</name>
                                </parameter>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>value</name>
                                </parameter>
                            </parameters>
                            <source></source>
                        </method>
                    </methods>
                    <inner-classes></inner-classes>
                </classbody>
            </class>
        </classes>
    </source>

    <source>
        <url>file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/main/java/org/huberb/prototyping/xml/qdox/QdoxMain.java</url>
        <package>
            <comment-header></comment-header>
            <annotations></annotations>
            <name>org.huberb.prototyping.xml.qdox</name>
        </package>
        <imports>
            <import>
                <name>com.thoughtworks.qdox.JavaProjectBuilder</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.model.JavaPackage</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.model.JavaSource</name>
            </import>
            <import>
                <name>java.io.File</name>
            </import>
            <import>
                <name>java.util.Collection</name>
            </import>
            <import>
                <name>java.util.Iterator</name>
            </import>
            <import>
                <name>java.util.concurrent.Callable</name>
            </import>
            <import>
                <name>picocli.CommandLine</name>
            </import>
        </imports>
        <classes>
            <class>
                <comment-header>
                    <doclets>
                        <doclet>
                            <name>author</name>
                            <value>berni3</value>
                        </doclet>
                    </doclets>
                </comment-header>
                <annotations>
                    <annotation>
                        <name>@picocli.CommandLine.Command</name>
                        <values>
                            <key>name</key>
                            <value>"QdoxCli"</value>
                            <key>mixinStandardHelpOptions</key>
                            <value>true</value>
                            <key>showAtFileInUsageHelp</key>
                            <value>true</value>
                            <key>showDefaultValues</key>
                            <value>true</value>
                            <key>version</key>
                            <value>"QdoxCli 0.1-SNAPSHOT"</value>
                            <key>description</key>
                            <value>"Run qdox from the command line%n"</value>
                        </values>
                    </annotation>
                </annotations>
                <modifiers>
                    <modifier>public</modifier>
                </modifiers>
                <class>
                    <name>QdoxMain</name>
                </class>
                <implements>java.util.concurrent.Callable&lt;java.lang.Integer&gt;</implements>
                <classbody>
                    <fields>
                        <field>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <type-canonical-name>&lt;![CDATA[java.io.File]]&gt;</type-canonical-name>
                            <name>src</name>
                        </field>
                    </fields>
                    <constructors></constructors>
                    <methods>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>public</modifier>
                                <modifier>static</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>main</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String[]]]&gt;</canonical-name>
                                    <name>args</name>
                                </parameter>
                            </parameters>
                            <throws>
                                <exception>java.lang.Exception</exception>
                            </throws>
                            <source>&lt;![CDATA[
                                final int exitCode = new CommandLine(new QdoxMain()).execute(args);
                                System.exit(exitCode);
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>java.lang.Integer</return-type>
                            <name>call</name>
                            <parameters></parameters>
                            <throws>
                                <exception>java.lang.Exception</exception>
                            </throws>
                            <source>&lt;![CDATA[
                                this.src = new File("src");
                                JavaProjectBuilder javaProjectBuilder = new JavaProjectBuilder();
                                javaProjectBuilder.addSourceTree(this.src);

                                processSources(javaProjectBuilder);
                                return 0;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <return-type>void</return-type>
                            <name>processPackages</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.JavaProjectBuilder]]&gt;</canonical-name>
                                    <name>builder</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                if (1 == 0) {
                                final Collection&lt;JavaPackage&gt; jpCollection = builder.getPackages();
                                for (Iterator&lt;JavaPackage&gt; it = jpCollection.iterator(); it.hasNext();) {
                                final JavaPackage jp = it.next();
                                System.out.printf("JavaPackage:%s%n", jp.getName());
                                }
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <return-type>void</return-type>
                            <name>processSources</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.JavaProjectBuilder]]&gt;</canonical-name>
                                    <name>builder</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                final Collection&lt;JavaSource&gt; javaSourceCollection = builder.getSources();
                                for (Iterator&lt;JavaSource&gt; it = javaSourceCollection.iterator(); it.hasNext();) {
                                final JavaSource source = it.next();
                                final XmlModelWriter xmlModelWriter = new XmlModelWriter();
                                xmlModelWriter.writeSource(source);
                                System.out.printf("JavaSource:%n%s%n", xmlModelWriter.toString());
                                }
                                ]]&gt;</source>
                        </method>
                    </methods>
                    <inner-classes></inner-classes>
                </classbody>
            </class>
        </classes>
    </source>

    <source>
        <url>file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/main/java/org/huberb/prototyping/xml/qdox/XmlIndentBufferEmitter.java</url>
        <package>
            <comment-header></comment-header>
            <annotations></annotations>
            <name>org.huberb.prototyping.xml.qdox</name>
        </package>
        <imports></imports>
        <classes>
            <class>
                <comment-header>
                    <doclets>
                        <doclet>
                            <name>author</name>
                            <value>berni3</value>
                        </doclet>
                    </doclets>
                </comment-header>
                <annotations></annotations>
                <modifiers>
                    <modifier>public</modifier>
                </modifiers>
                <class>
                    <name>XmlIndentBufferEmitter</name>
                </class>
                <implements>org.huberb.prototyping.xml.qdox.IGenericXmlEmitter</implements>
                <classbody>
                    <fields>
                        <field>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                            </modifiers>
                            <type-canonical-name>&lt;![CDATA[java.lang.String]]&gt;</type-canonical-name>
                            <name>eol</name>
                            <initialization-expression>"\n"</initialization-expression>
                        </field>
                        <field>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                            </modifiers>
                            <type-canonical-name>&lt;![CDATA[java.lang.String]]&gt;</type-canonical-name>
                            <name>indentation</name>
                            <initialization-expression>" "</initialization-expression>
                        </field>
                        <field>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                            </modifiers>
                            <type-canonical-name>&lt;![CDATA[java.lang.StringBuffer]]&gt;</type-canonical-name>
                            <name>buffer</name>
                            <initialization-expression>new StringBuffer()</initialization-expression>
                        </field>
                        <field>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                            </modifiers>
                            <type-canonical-name>&lt;![CDATA[int]]&gt;</type-canonical-name>
                            <name>depth</name>
                            <initialization-expression>0</initialization-expression>
                        </field>
                        <field>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                            </modifiers>
                            <type-canonical-name>&lt;![CDATA[boolean]]&gt;</type-canonical-name>
                            <name>newLine</name>
                            <initialization-expression>
                            </initialization-expression>
                        </field>
                    </fields>
                    <constructors></constructors>
                    <methods>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>setEol</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>eol</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                this.eol = eol;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>setIndentation</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>indentation</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                this.indentation = indentation;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>startDocument</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>endDocument</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>write</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>s</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                checkNewLine();
                                buffer.append(s);
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>write</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[char]]&gt;</canonical-name>
                                    <name>s</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                checkNewLine();
                                buffer.append(s);
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>newline</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                buffer.append(eol);
                                newLine = true;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>indent</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                depth++;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>deindent</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                depth--;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>java.lang.String</return-type>
                            <name>toString</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                return buffer.toString();
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>checkNewLine</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                if (newLine) {
                                for (int i = 0; i &lt; depth; i++) {
                                buffer.append(indentation);
                                }
                                newLine = false;
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>writeInlineElement</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>elementname</name>
                                </parameter>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>value</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                this.write("&lt;" + elementname + "&gt;");
                                this.write(value);
                                this.write("&lt;/" + elementname + "&gt;");
                                this.newline();
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>writeStartElement</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>elementname</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                this.write("&lt;" + elementname + "&gt;");
                                this.newline();
                                this.indent();
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>writeEndElement</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>elementname</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                this.write("&lt;/" + elementname + "&gt;");
                                this.newline();
                                this.deindent();
                                ]]&gt;</source>
                        </method>
                    </methods>
                    <inner-classes></inner-classes>
                </classbody>
            </class>
        </classes>
    </source>

    <source>
        <url>file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/main/java/org/huberb/prototyping/xml/qdox/XmlModelWriter.java</url>
        <package>
            <comment-header></comment-header>
            <annotations></annotations>
            <name>org.huberb.prototyping.xml.qdox</name>
        </package>
        <imports>
            <import>
                <name>com.thoughtworks.qdox.model.*</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaExports</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaOpens</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaProvides</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaRequires</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaUses</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.model.expression.AnnotationValue</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.model.expression.Expression</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.writer.ModelWriter</name>
            </import>
            <import>
                <name>java.io.StringWriter</name>
            </import>
            <import>
                <name>java.util.*</name>
            </import>
            <import>
                <name>java.util.function.Function</name>
            </import>
        </imports>
        <classes>
            <class>
                <comment-header>
                    <doclets>
                        <doclet>
                            <name>author</name>
                            <value>berni3</value>
                        </doclet>
                    </doclets>
                </comment-header>
                <annotations></annotations>
                <modifiers>
                    <modifier>public</modifier>
                </modifiers>
                <class>
                    <name>XmlModelWriter</name>
                </class>
                <implements>com.thoughtworks.qdox.writer.ModelWriter</implements>
                <classbody>
                    <fields>
                        <field>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                                <modifier>final</modifier>
                            </modifiers>
                            <type-canonical-name>&lt;![CDATA[org.huberb.prototyping.xml.qdox.IGenericXmlEmitter]]&gt;</type-canonical-name>
                            <name>buffer</name>
                            <initialization-expression>new XmlStreamWriterEmitter(new StringWriter())</initialization-expression>
                        </field>
                    </fields>
                    <constructors></constructors>
                    <methods>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[All information is written to this buffer. When extending this class you
                                    should write to this buffer]]&gt;</comment>
                                <doclets>
                                    <doclet>
                                        <name>return</name>
                                        <value>the buffer</value>
                                    </doclet>
                                </doclets>
                            </comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>protected</modifier>
                                <modifier>final</modifier>
                            </modifiers>
                            <return-type>org.huberb.prototyping.xml.qdox.IGenericXmlEmitter</return-type>
                            <name>getBuffer</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                return buffer;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeSource</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaSource]]&gt;</canonical-name>
                                    <name>source</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.startDocument();

                                buffer.writeStartElement("source");

                                buffer.writeInlineElement("url", source.getURL().toString());

                                // package statement
                                writePackage(source.getPackage());

                                // import statement
                                buffer.writeStartElement("imports");
                                for (String imprt : source.getImports()) {
                                buffer.writeStartElement("import");
                                buffer.writeInlineElement("name", imprt);
                                buffer.writeEndElement("import");
                                }
                                buffer.writeEndElement("imports");

                                // classes
                                buffer.writeStartElement("classes");
                                for (ListIterator&lt;JavaClass&gt; iter = source.getClasses().listIterator(); iter.hasNext();) {
                                JavaClass cls = iter.next();
                                writeClass(cls);
                                }
                                buffer.writeEndElement("classes");

                                buffer.writeEndElement("source");
                                buffer.endDocument();
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writePackage</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaPackage]]&gt;</canonical-name>
                                    <name>pckg</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.writeStartElement("package");
                                if (pckg != null) {
                                commentHeader(pckg);
                                buffer.writeInlineElement("name", pckg.getName());
                                }
                                buffer.writeEndElement("package");
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeClass</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaClass]]&gt;</canonical-name>
                                    <name>cls</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.writeStartElement("class");
                                commentHeader(cls);

                                writeAllModifiers(cls.getModifiers());

                                Function&lt;JavaClass, String&gt; typeOfF = (JavaClass jc) -&gt; {
                                if (cls.isEnum()) {
                                return "enum";
                                } else if (cls.isInterface()) {
                                return "interface";
                                } else if (cls.isAnnotation()) {
                                return "@interface";
                                } else {
                                return "class";
                                }
                                };

                                final String typeOf = typeOfF.apply(cls);
                                buffer.writeStartElement(typeOf);
                                buffer.writeInlineElement("name", cls.getName());
                                buffer.writeEndElement(typeOf);

                                // subclass
                                if (cls.getSuperClass() != null) {
                                String className = cls.getSuperClass().getFullyQualifiedName();
                                if (!"java.lang.Object".equals(className) &amp;&amp; !"java.lang.Enum".equals(className)) {
                                buffer.writeInlineElement("extends", cls.getSuperClass().getGenericCanonicalName());
                                }
                                }

                                // implements
                                if (cls.getImplements().size() &gt; 0) {
                                String exendsOrImplements = cls.isInterface() ? "extends" : "implements";
                                for (ListIterator&lt;JavaType&gt; iter = cls.getImplements().listIterator(); iter.hasNext();) {
                                buffer.writeInlineElement(exendsOrImplements, iter.next().getGenericCanonicalName());
                                }
                                }
                                writeClassBody(cls);
                                buffer.writeEndElement("class");
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeClassBody</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaClass]]&gt;</canonical-name>
                                    <name>cls</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.writeStartElement("classbody");

                                // fields
                                buffer.writeStartElement("fields");
                                for (JavaField javaField : cls.getFields()) {
                                writeField(javaField);
                                }
                                buffer.writeEndElement("fields");

                                // constructors
                                buffer.writeStartElement("constructors");
                                for (JavaConstructor javaConstructor : cls.getConstructors()) {
                                writeConstructor(javaConstructor);
                                }
                                buffer.writeEndElement("constructors");

                                // methods
                                buffer.writeStartElement("methods");
                                for (JavaMethod javaMethod : cls.getMethods()) {
                                writeMethod(javaMethod);
                                }
                                buffer.writeEndElement("methods");

                                // inner-classes
                                buffer.writeStartElement("inner-classes");
                                for (JavaClass innerCls : cls.getNestedClasses()) {
                                writeClass(innerCls);
                                }
                                buffer.writeEndElement("inner-classes");

                                buffer.writeEndElement("classbody");
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeInitializer</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaInitializer]]&gt;</canonical-name>
                                    <name>init</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.writeStartElement("initializer");
                                if (init.isStatic()) {
                                buffer.write("static");
                                }
                                buffer.write(init.getBlockContent());

                                buffer.writeEndElement("initializer");
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeField</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaField]]&gt;</canonical-name>
                                    <name>field</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.writeStartElement("field");
                                commentHeader(field);

                                writeAllModifiers(field.getModifiers());
                                if (!field.isEnumConstant()) {
                                buffer.writeStartElement("type-canonical-name");
                                buffer.write("&lt;![CDATA[");
                                buffer.write(field.getType().getGenericCanonicalName());
                                buffer.write("]]&gt;");
                                buffer.writeEndElement("type-canonical-name");
                                }
                                buffer.writeInlineElement("name", field.getName());

                                if (field.isEnumConstant()) {
                                if (field.getEnumConstantArguments() != null &amp;&amp; !field.getEnumConstantArguments().isEmpty()) {
                                buffer.writeStartElement("enums");
                                for (Iterator&lt;Expression&gt; iter = field.getEnumConstantArguments().listIterator(); iter.hasNext();) {
                                buffer.writeInlineElement("enum", iter.next().getParameterValue().toString());
                                }
                                buffer.writeEndElement("enums");
                                }
                                if (field.getEnumConstantClass() != null) {
                                writeClassBody(field.getEnumConstantClass());
                                }
                                } else {
                                if (field.getInitializationExpression() != null &amp;&amp; field.getInitializationExpression().length() &gt; 0) {
                                buffer.writeInlineElement("initialization-expression", field.getInitializationExpression());
                                }
                                }
                                buffer.writeEndElement("field");
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeConstructor</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaConstructor]]&gt;</canonical-name>
                                    <name>constructor</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.writeStartElement("constructor");

                                commentHeader(constructor);
                                writeAllModifiers(constructor.getModifiers());

                                buffer.writeInlineElement("name", constructor.getName());

                                buffer.writeStartElement("parameters");
                                for (ListIterator&lt;JavaParameter&gt; iter = constructor.getParameters().listIterator(); iter.hasNext();) {
                                writeParameter(iter.next());
                                }
                                buffer.writeEndElement("parameters");

                                if (!constructor.getExceptions().isEmpty()) {
                                buffer.writeStartElement("throws");
                                for (Iterator&lt;JavaClass&gt; excIter = constructor.getExceptions().iterator(); excIter.hasNext();) {
                                buffer.writeInlineElement("exception", excIter.next().getGenericCanonicalName());
                                }
                                buffer.writeEndElement("throws");
                                }

                                if (constructor.getSourceCode() != null) {
                                buffer.writeStartElement("source");
                                buffer.write("&lt;![CDATA[");
                                buffer.write(constructor.getSourceCode());
                                buffer.write("]]&gt;");
                                buffer.writeEndElement("source");
                                }

                                buffer.writeEndElement("constructor");

                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeMethod</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaMethod]]&gt;</canonical-name>
                                    <name>method</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.writeStartElement("method");
                                commentHeader(method);
                                writeAllModifiers(method.getModifiers());

                                buffer.writeInlineElement("return-type", method.getReturnType().getGenericCanonicalName());

                                buffer.writeInlineElement("name", method.getName());

                                buffer.writeStartElement("parameters");
                                for (ListIterator&lt;JavaParameter&gt; iter = method.getParameters().listIterator(); iter.hasNext();) {
                                writeParameter(iter.next());
                                }
                                buffer.writeEndElement("parameters");

                                if (!method.getExceptions().isEmpty()) {
                                buffer.writeStartElement("throws");
                                for (Iterator&lt;JavaClass&gt; excIter = method.getExceptions().iterator(); excIter.hasNext();) {
                                buffer.writeInlineElement("exception", excIter.next().getGenericCanonicalName());
                                }
                                buffer.writeEndElement("throws");
                                }

                                buffer.writeStartElement("source");
                                if (method.getSourceCode() != null &amp;&amp; method.getSourceCode().length() &gt; 0) {
                                buffer.write("&lt;![CDATA[");
                                buffer.write(method.getSourceCode());
                                buffer.write("]]&gt;");
                                }
                                buffer.writeEndElement("source");

                                buffer.writeEndElement("method");

                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>writeAllModifiers</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.util.Collection&lt;java.lang.String&gt;]]&gt;</canonical-name>
                                    <name>modifiers</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.writeStartElement("modifiers");
                                for (String modifier : modifiers) {
                                buffer.writeInlineElement("modifier", modifier);
                                }
                                buffer.writeEndElement("modifiers");
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeAnnotation</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaAnnotation]]&gt;</canonical-name>
                                    <name>annotation</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.writeStartElement("annotation");

                                buffer.writeInlineElement("name", "@" + annotation.getType().getGenericCanonicalName());

                                if (!annotation.getPropertyMap().isEmpty()) {
                                buffer.writeStartElement("values");

                                Iterator&lt;Map.Entry&lt;String, AnnotationValue&gt;&gt; iterator = annotation.getPropertyMap().entrySet().iterator();
                                while (iterator.hasNext()) {
                                Map.Entry&lt;String, AnnotationValue&gt; entry = iterator.next();
                                buffer.writeInlineElement("key", entry.getKey());
                                buffer.writeInlineElement("value", entry.getValue().toString());
                                }
                                buffer.writeEndElement("values");
                                }
                                buffer.writeEndElement("annotation");
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeParameter</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaParameter]]&gt;</canonical-name>
                                    <name>parameter</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.writeStartElement("parameter");
                                commentHeader(parameter);

                                buffer.writeStartElement("canonical-name");
                                buffer.write("&lt;![CDATA[");
                                buffer.write(parameter.getGenericCanonicalName());
                                buffer.write("]]&gt;");
                                buffer.writeEndElement("canonical-name");
                                if (parameter.isVarArgs()) {
                                buffer.writeInlineElement("var-args", "...");
                                }
                                buffer.writeInlineElement("name", parameter.getName());
                                buffer.writeEndElement("parameter");
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>protected</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>commentHeader</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaAnnotatedElement]]&gt;</canonical-name>
                                    <name>entity</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.writeStartElement("comment-header");
                                if (entity.getComment() != null || (entity.getTags().size() &gt; 0)) {
                                if (entity.getComment() != null &amp;&amp; entity.getComment().length() &gt; 0) {
                                buffer.writeStartElement("comment");
                                buffer.write("&lt;![CDATA[");
                                buffer.write(entity.getComment());
                                buffer.write("]]&gt;");
                                buffer.writeEndElement("comment");
                                }

                                if (!entity.getTags().isEmpty()) {
                                buffer.writeStartElement("doclets");
                                for (DocletTag docletTag : entity.getTags()) {
                                buffer.writeStartElement("doclet");
                                buffer.writeInlineElement("name", docletTag.getName());
                                if (docletTag.getValue().length() &gt; 0) {
                                buffer.writeInlineElement("value", docletTag.getValue());
                                }
                                buffer.writeEndElement("doclet");
                                }
                                buffer.writeEndElement("doclets");
                                }
                                }
                                buffer.writeEndElement("comment-header");

                                if (entity.getAnnotations() != null) {
                                buffer.writeStartElement("annotations");

                                for (JavaAnnotation annotation : entity.getAnnotations()) {
                                writeAnnotation(annotation);
                                }
                                buffer.writeEndElement("annotations");
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeModuleDescriptor</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaModuleDescriptor]]&gt;</canonical-name>
                                    <name>descriptor</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                if (descriptor.isOpen()) {
                                buffer.write("open ");
                                }
                                buffer.write("module " + descriptor.getName() + " {");

                                for (JavaRequires requires : descriptor.getRequires()) {
                                buffer.newline();
                                writeModuleRequires(requires);
                                }

                                for (JavaExports exports : descriptor.getExports()) {
                                buffer.newline();
                                writeModuleExports(exports);
                                }

                                for (JavaOpens opens : descriptor.getOpens()) {
                                buffer.newline();
                                writeModuleOpens(opens);
                                }

                                for (JavaProvides provides : descriptor.getProvides()) {
                                buffer.newline();
                                writeModuleProvides(provides);
                                }

                                for (JavaUses uses : descriptor.getUses()) {
                                buffer.newline();
                                writeModuleUses(uses);
                                }

                                buffer.newline();
                                buffer.write('}');
                                buffer.newline();
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeModuleExports</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaExports]]&gt;</canonical-name>
                                    <name>exports</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[

                                buffer.write("exports ");
                                buffer.write(exports.getSource().getName());
                                if (!exports.getTargets().isEmpty()) {
                                buffer.write(" to ");
                                Iterator&lt;JavaModule&gt; targets = exports.getTargets().iterator();
                                while (targets.hasNext()) {
                                JavaModule target = targets.next();
                                buffer.write(target.getName());
                                if (targets.hasNext()) {
                                buffer.write(", ");
                                }
                                }
                                }
                                buffer.write(';');
                                buffer.newline();
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeModuleOpens</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaOpens]]&gt;</canonical-name>
                                    <name>opens</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.write("opens ");
                                buffer.write(opens.getSource().getName());
                                if (!opens.getTargets().isEmpty()) {
                                buffer.write(" to ");
                                Iterator&lt;JavaModule&gt; targets = opens.getTargets().iterator();
                                while (targets.hasNext()) {
                                JavaModule target = targets.next();
                                buffer.write(target.getName());
                                if (targets.hasNext()) {
                                buffer.write(", ");
                                }
                                }
                                }
                                buffer.write(';');
                                buffer.newline();
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeModuleProvides</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaProvides]]&gt;</canonical-name>
                                    <name>provides</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.write("provides ");
                                buffer.write(provides.getService().getName());
                                buffer.write(" with ");
                                Iterator&lt;JavaClass&gt; providers = provides.getProviders().iterator();
                                while (providers.hasNext()) {
                                JavaClass provider = providers.next();
                                buffer.write(provider.getName());
                                if (providers.hasNext()) {
                                buffer.write(", ");
                                }
                                }
                                buffer.write(';');
                                buffer.newline();
                                return null;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeModuleRequires</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaRequires]]&gt;</canonical-name>
                                    <name>requires</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.write("requires ");
                                writeAllModifiers(requires.getModifiers());
                                buffer.write(requires.getModule().getName());
                                buffer.write(';');
                                buffer.newline();
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeModuleUses</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaUses]]&gt;</canonical-name>
                                    <name>uses</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                buffer.write("uses ");
                                buffer.write(uses.getService().getName());
                                buffer.write(';');
                                buffer.newline();
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>java.lang.String</return-type>
                            <name>toString</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                return buffer.toString();
                                ]]&gt;</source>
                        </method>
                    </methods>
                    <inner-classes></inner-classes>
                </classbody>
            </class>
        </classes>
    </source>

    <source>
        <url>file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/main/java/org/huberb/prototyping/xml/qdox/XmlSaxModelWriter.java</url>
        <package>
            <comment-header></comment-header>
            <annotations></annotations>
            <name>org.huberb.prototyping.xml.qdox</name>
        </package>
        <imports>
            <import>
                <name>com.thoughtworks.qdox.model.*</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.model.JavaModuleDescriptor.*</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.writer.ModelWriter</name>
            </import>
            <import>
                <name>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlModelSaxWriterFactory</name>
            </import>
            <import>
                <name>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumer</name>
            </import>
            <import>
                <name>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumerTemplates</name>
            </import>
            <import>
                <name>javax.xml.stream.XMLStreamException</name>
            </import>
            <import>
                <name>java.io.StringWriter</name>
            </import>
            <import>
                <name>java.util.Collection</name>
            </import>
            <import>
                <name>java.util.List</name>
            </import>
            <import>
                <name>java.util.ListIterator</name>
            </import>
            <import>
                <name>java.util.logging.Level</name>
            </import>
            <import>
                <name>java.util.logging.Logger</name>
            </import>
        </imports>
        <classes>
            <class>
                <comment-header>
                    <doclets>
                        <doclet>
                            <name>author</name>
                            <value>berni3</value>
                        </doclet>
                    </doclets>
                </comment-header>
                <annotations></annotations>
                <modifiers>
                    <modifier>public</modifier>
                </modifiers>
                <class>
                    <name>XmlSaxModelWriter</name>
                </class>
                <implements>com.thoughtworks.qdox.writer.ModelWriter</implements>
                <classbody>
                    <fields>
                        <field>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                                <modifier>static</modifier>
                                <modifier>final</modifier>
                            </modifiers>
                            <type-canonical-name>&lt;![CDATA[java.util.logging.Logger]]&gt;</type-canonical-name>
                            <name>LOG</name>
                            <initialization-expression>Logger.getLogger(XmlSaxModelWriter.class.getName())</initialization-expression>
                        </field>
                        <field>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <type-canonical-name>&lt;![CDATA[java.io.StringWriter]]&gt;</type-canonical-name>
                            <name>sw</name>
                            <initialization-expression>
                                //private XmlIndentBuffer buffer = new XmlIndentBuffer();
                            </initialization-expression>
                        </field>
                        <field>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                                <modifier>final</modifier>
                            </modifiers>
                            <type-canonical-name>&lt;![CDATA[org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumerTemplates]]&gt;</type-canonical-name>
                            <name>xswct</name>
                            <initialization-expression>
                            </initialization-expression>
                        </field>
                    </fields>
                    <constructors>
                        <constructor>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <name>XmlSaxModelWriter</name>
                            <parameters></parameters>
                            <throws>
                                <exception>javax.xml.stream.XMLStreamException</exception>
                            </throws>
                            <source>&lt;![CDATA[
                                this.sw = new StringWriter();
                                this.xswct = new XmlStreamWriterConsumerTemplates();
                                ]]&gt;</source>
                        </constructor>
                    </constructors>
                    <methods>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                                <doclets>
                                    <doclet>
                                        <name>return</name>
                                        <value>the buffer</value>
                                    </doclet>
                                </doclets>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeSource</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaSource]]&gt;</canonical-name>
                                    <name>source</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[

                                this.xswct.startDocument();

                                xswct.startElement("source");
                                xswct.attributes("url", source.getURL().toString());

                                // package statement
                                writePackage(source.getPackage());

                                // import statement
                                xswct.startElement("imports");
                                for (String imprt : source.getImports()) {
                                this.xswct.emptyElement("import");
                                this.xswct.attributes("name", imprt);
                                }
                                xswct.endElement();

                                // classes
                                for (ListIterator&lt;JavaClass&gt; iter = source.getClasses().listIterator(); iter.hasNext(); ) {
                                JavaClass cls = iter.next();
                                writeClass(cls);
                                if (iter.hasNext()) {
                                //buffer.newline();
                                }
                                }
                                this.xswct.endElement();
                                this.xswct.endDocument();

                                try (final XmlSaxWriter xsw = new XmlModelSaxWriterFactory().create(sw)) {
                                final XmlStreamWriterConsumer consumer = xswct.build();
                                xsw.accept(consumer);
                                } catch (XMLStreamException ex) {
                                LOG.log(Level.WARNING, "Cannot XML from JavaSource", ex);
                                }
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writePackage</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaPackage]]&gt;</canonical-name>
                                    <name>pckg</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[

                                if (pckg != null) {
                                commentHeader(pckg);
                                //buffer.write("package ");
                                this.xswct.emptyElement("package");
                                this.xswct.attributes("name", pckg.getName());
                                }

                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeClass</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaClass]]&gt;</canonical-name>
                                    <name>cls</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                this.xswct.startElement("class");

                                commentHeader(cls);

                                writeAccessibilityModifier(cls.getModifiers());
                                writeNonAccessibilityModifiers(cls.getModifiers());

                                final String typeOf = cls.isEnum() ? "enum "
                                : cls.isInterface() ? "interface "
                                : cls.isAnnotation() ? "@interface "
                                : "class ";
                                this.xswct.emptyElement("typeOf")
                                .attributes("name", typeOf);

                                // subclass
                                if (cls.getSuperClass() != null) {
                                String className = cls.getSuperClass().getFullyQualifiedName();
                                if (!"java.lang.Object".equals(className) &amp;&amp; !"java.lang.Enum".equals(className)) {
                                this.xswct.emptyElement(" extends ")
                                .attributes("name", cls.getSuperClass().getGenericCanonicalName());
                                }
                                }
                                // implements
                                if (cls.getImplements().size() &gt; 0) {
                                String extendsOrImplements = (cls.isInterface() ? " extends " : " implements ");

                                for (ListIterator&lt;JavaType&gt; iter = cls.getImplements().listIterator(); iter.hasNext(); ) {
                                this.xswct.emptyElement(extendsOrImplements)
                                .attributes("name", iter.next().getGenericCanonicalName());
                                }
                                }
                                writeClassBody(cls);
                                this.xswct.endElement();
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeClassBody</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaClass]]&gt;</canonical-name>
                                    <name>cls</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                this.xswct.startElement("classbody");

                                // fields
                                for (JavaField javaField : cls.getFields()) {
                                writeField(javaField);
                                }

                                // constructors
                                for (JavaConstructor javaConstructor : cls.getConstructors()) {
                                writeConstructor(javaConstructor);
                                }

                                // methods
                                for (JavaMethod javaMethod : cls.getMethods()) {
                                writeMethod(javaMethod);
                                }

                                // inner-classes
                                for (JavaClass innerCls : cls.getNestedClasses()) {
                                writeClass(innerCls);
                                }

                                this.xswct.endElement();
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeInitializer</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaInitializer]]&gt;</canonical-name>
                                    <name>init</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        buffer.writeStartElement("initializer");
                                //        if (init.isStatic()) {
                                //            buffer.write("static ");
                                //        }
                                //        buffer.write('{');
                                //        buffer.newline();
                                //        buffer.indent();
                                //
                                //        buffer.write(init.getBlockContent());
                                //
                                //        buffer.deindent();
                                //        buffer.newline();
                                //        buffer.write('}');
                                //        buffer.newline();
                                //        buffer.writeEndElement("initializer");
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeField</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaField]]&gt;</canonical-name>
                                    <name>field</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                this.xswct.startElement("field")
                                .attributes("name", field.getName());

                                commentHeader(field);

                                writeAllModifiers(field.getModifiers());
                                //        if (!field.isEnumConstant()) {
                                //            buffer.write(field.getType().getGenericCanonicalName());
                                //            buffer.write(' ');
                                //        }
                                //        buffer.write(field.getName());
                                //
                                //        if (field.isEnumConstant()) {
                                //            if (field.getEnumConstantArguments() != null &amp;&amp; !field.getEnumConstantArguments().isEmpty()) {
                                //                buffer.write("( ");
                                //                for (Iterator&lt;Expression&gt; iter = field.getEnumConstantArguments().listIterator(); iter.hasNext();) {
                                //                    buffer.write(iter.next().getParameterValue().toString());
                                //                    if (iter.hasNext()) {
                                //                        buffer.write(", ");
                                //                    }
                                //                }
                                //                buffer.write(" )");
                                //            }
                                //            if (field.getEnumConstantClass() != null) {
                                //                writeClassBody(field.getEnumConstantClass());
                                //            }
                                //        } else {
                                //            if (field.getInitializationExpression() != null &amp;&amp; field.getInitializationExpression().length() &gt; 0) {
                                //                {
                                //                    buffer.write(" = ");
                                //                }
                                //                buffer.write(field.getInitializationExpression());
                                //            }
                                //        }

                                this.xswct.endElement();
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeConstructor</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaConstructor]]&gt;</canonical-name>
                                    <name>constructor</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        buffer.writeStartElement("constructor");
                                //
                                //        commentHeader(constructor);
                                //        writeAllModifiers(constructor.getModifiers());
                                //
                                //        buffer.write(constructor.getName());
                                //        buffer.write('(');
                                //        for (ListIterator&lt;JavaParameter&gt; iter = constructor.getParameters().listIterator(); iter.hasNext();) {
                                //            writeParameter(iter.next());
                                //            if (iter.hasNext()) {
                                //                buffer.write(", ");
                                //            }
                                //        }
                                //        buffer.write(')');
                                //
                                //        if (constructor.getExceptions().size() &gt; 0) {
                                //            buffer.write(" throws ");
                                //            for (Iterator&lt;JavaClass&gt; excIter = constructor.getExceptions().iterator(); excIter.hasNext();) {
                                //                buffer.write(excIter.next().getGenericCanonicalName());
                                //                if (excIter.hasNext()) {
                                //                    buffer.write(", ");
                                //                }
                                //            }
                                //        }
                                //
                                //        buffer.write(" {");
                                //        buffer.newline();
                                //        if (constructor.getSourceCode() != null) {
                                //            buffer.write(constructor.getSourceCode());
                                //        }
                                //        buffer.write('}');
                                //        buffer.newline();
                                //        buffer.writeEndElement("constructor");
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeMethod</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaMethod]]&gt;</canonical-name>
                                    <name>method</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        buffer.writeStartElement("method");
                                //        commentHeader(method);
                                //        writeAccessibilityModifier(method.getModifiers());
                                //        writeNonAccessibilityModifiers(method.getModifiers());
                                //
                                //        buffer.write(method.getReturnType().getGenericCanonicalName());
                                //        buffer.write(' ');
                                //
                                //        buffer.write(method.getName());
                                //        buffer.write('(');
                                //
                                //        for (ListIterator&lt;JavaParameter&gt; iter = method.getParameters().listIterator(); iter.hasNext();) {
                                //            writeParameter(iter.next());
                                //            if (iter.hasNext()) {
                                //                buffer.write(", ");
                                //            }
                                //
                                //        }
                                //        buffer.write(')');
                                //
                                //        if (method.getExceptions().size() &gt; 0) {
                                //            buffer.write(" throws ");
                                //            for (Iterator&lt;JavaClass&gt; excIter = method.getExceptions().iterator(); excIter.hasNext();) {
                                //                buffer.write(excIter.next().getGenericCanonicalName());
                                //                if (excIter.hasNext()) {
                                //                    buffer.write(", ");
                                //                }
                                //            }
                                //        }
                                //
                                //        if (method.getSourceCode() != null &amp;&amp; method.getSourceCode().length() &gt; 0) {
                                //            buffer.write(" {");
                                //            buffer.newline();
                                //            buffer.write(method.getSourceCode());
                                //            buffer.write('}');
                                //            buffer.newline();
                                //        } else {
                                //            buffer.write(';');
                                //            buffer.newline();
                                //        }
                                //        buffer.writeEndElement("method");
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>writeNonAccessibilityModifiers</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.util.Collection&lt;java.lang.String&gt;]]&gt;</canonical-name>
                                    <name>modifiers</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        buffer.writeStartElement("nonAccessibilityModifiers");
                                //
                                //        for (String modifier : modifiers) {
                                //            if (!modifier.startsWith("p")) {
                                //                buffer.write(modifier);
                                //                buffer.write(' ');
                                //            }
                                //        }
                                //        buffer.writeEndElement("nonAccessibilityModifiers");
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>writeAccessibilityModifier</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.util.Collection&lt;java.lang.String&gt;]]&gt;</canonical-name>
                                    <name>modifiers</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        buffer.writeStartElement("accessibilityModifier");
                                //        for (String modifier : modifiers) {
                                //            if (modifier.startsWith("p")) {
                                //                buffer.write(modifier);
                                //                buffer.write(' ');
                                //            }
                                //        }
                                //        buffer.writeEndElement("accessibilityModifier");
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>writeAllModifiers</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.util.List&lt;java.lang.String&gt;]]&gt;</canonical-name>
                                    <name>modifiers</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        buffer.writeStartElement("allModifiers");
                                //        for (String modifier : modifiers) {
                                //            buffer.write(modifier);
                                //            buffer.write(' ');
                                //        }
                                //        buffer.writeEndElement("allModifiers");
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeAnnotation</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaAnnotation]]&gt;</canonical-name>
                                    <name>annotation</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        buffer.writeStartElement("annotation");
                                //
                                //        buffer.write('@');
                                //        buffer.write(annotation.getType().getGenericCanonicalName());
                                //        if (!annotation.getPropertyMap().isEmpty()) {
                                //            buffer.indent();
                                //            buffer.write('(');
                                //            Iterator&lt;Map.Entry&lt;String, AnnotationValue&gt;&gt; iterator = annotation.getPropertyMap().entrySet().iterator();
                                //            while (iterator.hasNext()) {
                                //                Map.Entry&lt;String, AnnotationValue&gt; entry = iterator.next();
                                //                buffer.write(entry.getKey());
                                //                buffer.write('=');
                                //                buffer.write(entry.getValue().toString());
                                //                if (iterator.hasNext()) {
                                //                    buffer.write(',');
                                //                    buffer.newline();
                                //                }
                                //            }
                                //            buffer.write(')');
                                //            buffer.deindent();
                                //        }
                                //        buffer.newline();
                                //        buffer.writeEndElement("annotation");
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeParameter</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaParameter]]&gt;</canonical-name>
                                    <name>parameter</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        buffer.writeStartElement("parameter");
                                //        commentHeader(parameter);
                                //        buffer.write(parameter.getGenericCanonicalName());
                                //        if (parameter.isVarArgs()) {
                                //            buffer.write("...");
                                //        }
                                //        buffer.write(' ');
                                //        buffer.write(parameter.getName());
                                //        buffer.writeEndElement("parameter");
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>protected</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>commentHeader</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaAnnotatedElement]]&gt;</canonical-name>
                                    <name>entity</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        buffer.writeStartElement("commentHeader");
                                //        if (entity.getComment() != null || (entity.getTags().size() &gt; 0)) {
                                //            buffer.write("/**");
                                //            buffer.newline();
                                //
                                //            if (entity.getComment() != null &amp;&amp; entity.getComment().length() &gt; 0) {
                                //                buffer.write(" * ");
                                //
                                //                buffer.write(entity.getComment().replaceAll("\n", "\n * "));
                                //
                                //                buffer.newline();
                                //            }
                                //
                                //            if (entity.getTags().size() &gt; 0) {
                                //                if (entity.getComment() != null &amp;&amp; entity.getComment().length() &gt; 0) {
                                //                    buffer.write(" *");
                                //                    buffer.newline();
                                //                }
                                //                for (DocletTag docletTag : entity.getTags()) {
                                //                    buffer.write(" * @");
                                //                    buffer.write(docletTag.getName());
                                //                    if (docletTag.getValue().length() &gt; 0) {
                                //                        buffer.write(' ');
                                //                        buffer.write(docletTag.getValue());
                                //                    }
                                //                    buffer.newline();
                                //                }
                                //            }
                                //
                                //            buffer.write(" */");
                                //            buffer.newline();
                                //        }
                                //        buffer.writeEndElement("commentHeader");

                                if (entity.getAnnotations() != null) {
                                for (JavaAnnotation annotation : entity.getAnnotations()) {
                                writeAnnotation(annotation);
                                }
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeModuleDescriptor</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaModuleDescriptor]]&gt;</canonical-name>
                                    <name>descriptor</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        if (descriptor.isOpen()) {
                                //            buffer.write("open ");
                                //        }
                                //        buffer.write("module " + descriptor.getName() + " {");
                                //        buffer.newline();
                                //        buffer.indent();
                                //
                                //        for (JavaRequires requires : descriptor.getRequires()) {
                                //            buffer.newline();
                                //            writeModuleRequires(requires);
                                //        }
                                //
                                //        for (JavaExports exports : descriptor.getExports()) {
                                //            buffer.newline();
                                //            writeModuleExports(exports);
                                //        }
                                //
                                //        for (JavaOpens opens : descriptor.getOpens()) {
                                //            buffer.newline();
                                //            writeModuleOpens(opens);
                                //        }
                                //
                                //        for (JavaProvides provides : descriptor.getProvides()) {
                                //            buffer.newline();
                                //            writeModuleProvides(provides);
                                //        }
                                //
                                //        for (JavaUses uses : descriptor.getUses()) {
                                //            buffer.newline();
                                //            writeModuleUses(uses);
                                //        }
                                //
                                //        buffer.newline();
                                //        buffer.deindent();
                                //        buffer.write('}');
                                //        buffer.newline();
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeModuleExports</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaExports]]&gt;</canonical-name>
                                    <name>exports</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        buffer.write("exports ");
                                //        buffer.write(exports.getSource().getName());
                                //        if (!exports.getTargets().isEmpty()) {
                                //            buffer.write(" to ");
                                //            Iterator&lt;JavaModule&gt; targets = exports.getTargets().iterator();
                                //            while (targets.hasNext()) {
                                //                JavaModule target = targets.next();
                                //                buffer.write(target.getName());
                                //                if (targets.hasNext()) {
                                //                    buffer.write(", ");
                                //                }
                                //            }
                                //        }
                                //        buffer.write(';');
                                //        buffer.newline();
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeModuleOpens</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaOpens]]&gt;</canonical-name>
                                    <name>opens</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        buffer.write("opens ");
                                //        buffer.write(opens.getSource().getName());
                                //        if (!opens.getTargets().isEmpty()) {
                                //            buffer.write(" to ");
                                //            Iterator&lt;JavaModule&gt; targets = opens.getTargets().iterator();
                                //            while (targets.hasNext()) {
                                //                JavaModule target = targets.next();
                                //                buffer.write(target.getName());
                                //                if (targets.hasNext()) {
                                //                    buffer.write(", ");
                                //                }
                                //            }
                                //        }
                                //        buffer.write(';');
                                //        buffer.newline();
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeModuleProvides</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaProvides]]&gt;</canonical-name>
                                    <name>provides</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        buffer.write("provides ");
                                //        buffer.write(provides.getService().getName());
                                //        buffer.write(" with ");
                                //        Iterator&lt;JavaClass&gt; providers = provides.getProviders().iterator();
                                //        while (providers.hasNext()) {
                                //            JavaClass provider = providers.next();
                                //            buffer.write(provider.getName());
                                //            if (providers.hasNext()) {
                                //                buffer.write(", ");
                                //            }
                                //        }
                                //        buffer.write(';');
                                //        buffer.newline();
                                return null;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeModuleRequires</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaRequires]]&gt;</canonical-name>
                                    <name>requires</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        buffer.write("requires ");
                                //        writeAccessibilityModifier(requires.getModifiers());
                                //        writeNonAccessibilityModifiers(requires.getModifiers());
                                //        buffer.write(requires.getModule().getName());
                                //        buffer.write(';');
                                //        buffer.newline();
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[{@inheritDoc}]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>com.thoughtworks.qdox.writer.ModelWriter</return-type>
                            <name>writeModuleUses</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[com.thoughtworks.qdox.model.JavaModuleDescriptor.JavaUses]]&gt;</canonical-name>
                                    <name>uses</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                //        buffer.write("uses ");
                                //        buffer.write(uses.getService().getName());
                                //        buffer.write(';');
                                //        buffer.newline();
                                return this;
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>java.lang.String</return-type>
                            <name>toString</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                return this.sw.toString();
                                ]]&gt;</source>
                        </method>
                    </methods>
                    <inner-classes></inner-classes>
                </classbody>
            </class>
        </classes>
    </source>

    <source>
        <url>file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/main/java/org/huberb/prototyping/xml/qdox/XmlSaxWriter.java</url>
        <package>
            <comment-header></comment-header>
            <annotations></annotations>
            <name>org.huberb.prototyping.xml.qdox</name>
        </package>
        <imports>
            <import>
                <name>java.io.Writer</name>
            </import>
            <import>
                <name>java.util.Map</name>
            </import>
            <import>
                <name>java.util.Objects</name>
            </import>
            <import>
                <name>javax.xml.stream.XMLOutputFactory</name>
            </import>
            <import>
                <name>javax.xml.stream.XMLStreamException</name>
            </import>
            <import>
                <name>javax.xml.stream.XMLStreamWriter</name>
            </import>
        </imports>
        <classes>
            <class>
                <comment-header>
                    <doclets>
                        <doclet>
                            <name>author</name>
                            <value>berni3</value>
                        </doclet>
                    </doclets>
                </comment-header>
                <annotations></annotations>
                <modifiers>
                    <modifier>public</modifier>
                </modifiers>
                <class>
                    <name>XmlSaxWriter</name>
                </class>
                <implements>java.lang.AutoCloseable</implements>
                <classbody>
                    <fields>
                        <field>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>private</modifier>
                                <modifier>final</modifier>
                            </modifiers>
                            <type-canonical-name>&lt;![CDATA[javax.xml.stream.XMLStreamWriter]]&gt;</type-canonical-name>
                            <name>xsw</name>
                        </field>
                    </fields>
                    <constructors>
                        <constructor>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <name>XmlSaxWriter</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[javax.xml.stream.XMLStreamWriter]]&gt;</canonical-name>
                                    <name>xsw</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                this.xsw = xsw;
                                String defaultNamespace = "urn:xxx";
                                ]]&gt;</source>
                        </constructor>
                    </constructors>
                    <methods>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <return-type>void</return-type>
                            <name>accept</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumer]]&gt;</canonical-name>
                                    <name>consumer</name>
                                </parameter>
                            </parameters>
                            <throws>
                                <exception>javax.xml.stream.XMLStreamException</exception>
                            </throws>
                            <source>&lt;![CDATA[
                                consumer.accept(xsw);
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>close</name>
                            <parameters></parameters>
                            <throws>
                                <exception>javax.xml.stream.XMLStreamException</exception>
                            </throws>
                            <source>&lt;![CDATA[
                                this.xsw.close();

                                ]]&gt;</source>
                        </method>
                    </methods>
                    <inner-classes>
                        <class>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.FunctionalInterface</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                                <modifier>static</modifier>
                            </modifiers>
                            <interface>
                                <name>XmlStreamWriterConsumer</name>
                            </interface>
                            <classbody>
                                <fields></fields>
                                <constructors></constructors>
                                <methods>
                                    <method>
                                        <comment-header>
                                            <comment>&lt;![CDATA[Performs this operation on the given argument.]]&gt;</comment>
                                            <doclets>
                                                <doclet>
                                                    <name>param</name>
                                                    <value>t the input argument</value>
                                                </doclet>
                                            </doclets>
                                        </comment-header>
                                        <annotations></annotations>
                                        <modifiers>
                                            <modifier>public</modifier>
                                        </modifiers>
                                        <return-type>void</return-type>
                                        <name>accept</name>
                                        <parameters>
                                            <parameter>
                                                <comment-header></comment-header>
                                                <annotations></annotations>
                                                <canonical-name>&lt;![CDATA[javax.xml.stream.XMLStreamWriter]]&gt;</canonical-name>
                                                <name>xsw</name>
                                            </parameter>
                                        </parameters>
                                        <throws>
                                            <exception>javax.xml.stream.XMLStreamException</exception>
                                        </throws>
                                        <source></source>
                                    </method>
                                    <method>
                                        <comment-header>
                                            <comment>&lt;![CDATA[Returns a composed {@code Consumer} that performs, in sequence, this
                                                operation followed by the {@code after} operation. If performing
                                                either operation throws an exception, it is relayed to the caller of
                                                the composed operation. If performing this operation throws an
                                                exception, the {@code after} operation will not be performed.]]&gt;</comment>
                                            <doclets>
                                                <doclet>
                                                    <name>param</name>
                                                    <value>after the operation to perform after this operation</value>
                                                </doclet>
                                                <doclet>
                                                    <name>return</name>
                                                    <value>a composed {@code Consumer} that performs in sequence this
                                                        operation followed by the {@code after} operation</value>
                                                </doclet>
                                                <doclet>
                                                    <name>throws</name>
                                                    <value>NullPointerException if {@code after} is null</value>
                                                </doclet>
                                            </doclets>
                                        </comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <return-type>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumer</return-type>
                                        <name>andThen</name>
                                        <parameters>
                                            <parameter>
                                                <comment-header></comment-header>
                                                <annotations></annotations>
                                                <canonical-name>&lt;![CDATA[org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumer]]&gt;</canonical-name>
                                                <name>after</name>
                                            </parameter>
                                        </parameters>
                                        <source>&lt;![CDATA[
                                            Objects.requireNonNull(after);
                                            return (XMLStreamWriter t) -&gt; {
                                            accept(t);
                                            after.accept(t);
                                            };
                                            ]]&gt;</source>
                                    </method>
                                </methods>
                                <inner-classes></inner-classes>
                            </classbody>
                        </class>
                        <class>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>static</modifier>
                            </modifiers>
                            <class>
                                <name>XmlStreamWriterConsumerTemplates</name>
                            </class>
                            <classbody>
                                <fields>
                                    <field>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers>
                                            <modifier>private</modifier>
                                        </modifiers>
                                        <type-canonical-name>&lt;![CDATA[org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumer]]&gt;</type-canonical-name>
                                        <name>current</name>
                                    </field>
                                </fields>
                                <constructors>
                                    <constructor>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <name>XmlStreamWriterConsumerTemplates</name>
                                        <parameters></parameters>
                                        <source>&lt;![CDATA[
                                            this(xsw -&gt; {
                                            });
                                            ]]&gt;</source>
                                    </constructor>
                                    <constructor>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <name>XmlStreamWriterConsumerTemplates</name>
                                        <parameters>
                                            <parameter>
                                                <comment-header></comment-header>
                                                <annotations></annotations>
                                                <canonical-name>&lt;![CDATA[org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumer]]&gt;</canonical-name>
                                                <name>current</name>
                                            </parameter>
                                        </parameters>
                                        <source>&lt;![CDATA[
                                            this.current = current;
                                            ]]&gt;</source>
                                    </constructor>
                                </constructors>
                                <methods>
                                    <method>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <return-type>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumerTemplates</return-type>
                                        <name>startDocument</name>
                                        <parameters></parameters>
                                        <source>&lt;![CDATA[
                                            final XmlStreamWriterConsumer xswc = current
                                            .andThen(xsw -&gt; xsw.writeStartDocument());
                                            this.current = xswc;
                                            return this;
                                            ]]&gt;</source>
                                    </method>
                                    <method>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <return-type>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumerTemplates</return-type>
                                        <name>endDocument</name>
                                        <parameters></parameters>
                                        <source>&lt;![CDATA[
                                            final XmlStreamWriterConsumer xswc = current
                                            .andThen(xsw -&gt; xsw.writeEndDocument());
                                            this.current = xswc;
                                            return this;
                                            ]]&gt;</source>
                                    </method>
                                    <method>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <return-type>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumerTemplates</return-type>
                                        <name>comment</name>
                                        <parameters>
                                            <parameter>
                                                <comment-header></comment-header>
                                                <annotations></annotations>
                                                <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                                <name>comment</name>
                                            </parameter>
                                        </parameters>
                                        <source>&lt;![CDATA[
                                            final XmlStreamWriterConsumer xswc = current
                                            .andThen(xsw -&gt; xsw.writeComment(comment));
                                            this.current = xswc;
                                            return this;
                                            ]]&gt;</source>
                                    </method>
                                    <method>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <return-type>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumerTemplates</return-type>
                                        <name>text</name>
                                        <parameters>
                                            <parameter>
                                                <comment-header></comment-header>
                                                <annotations></annotations>
                                                <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                                <name>characters</name>
                                            </parameter>
                                        </parameters>
                                        <source>&lt;![CDATA[
                                            final XmlStreamWriterConsumer xswc = current
                                            .andThen(xsw -&gt; xsw.writeCharacters(characters));
                                            this.current = xswc;
                                            return this;
                                            ]]&gt;</source>
                                    </method>
                                    <method>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <return-type>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumerTemplates</return-type>
                                        <name>emptyElement</name>
                                        <parameters>
                                            <parameter>
                                                <comment-header></comment-header>
                                                <annotations></annotations>
                                                <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                                <name>elementname</name>
                                            </parameter>
                                        </parameters>
                                        <source>&lt;![CDATA[
                                            XmlStreamWriterConsumer xswc = current
                                            .andThen(xsw -&gt; xsw.writeEmptyElement(elementname));
                                            this.current = xswc;
                                            return this;
                                            ]]&gt;</source>
                                    </method>
                                    <method>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <return-type>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumerTemplates</return-type>
                                        <name>startElement</name>
                                        <parameters>
                                            <parameter>
                                                <comment-header></comment-header>
                                                <annotations></annotations>
                                                <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                                <name>elementname</name>
                                            </parameter>
                                        </parameters>
                                        <source>&lt;![CDATA[
                                            XmlStreamWriterConsumer xswc = this.current
                                            .andThen(xsw -&gt; xsw.writeStartElement(elementname));
                                            this.current = xswc;
                                            return this;
                                            ]]&gt;</source>
                                    </method>
                                    <method>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <return-type>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumerTemplates</return-type>
                                        <name>endElement</name>
                                        <parameters></parameters>
                                        <source>&lt;![CDATA[
                                            XmlStreamWriterConsumer xswc = this.current
                                            .andThen(xsw -&gt; xsw.writeEndElement());
                                            this.current = xswc;
                                            return this;
                                            ]]&gt;</source>
                                    </method>
                                    <method>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <return-type>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumerTemplates</return-type>
                                        <name>attributes</name>
                                        <parameters>
                                            <parameter>
                                                <comment-header></comment-header>
                                                <annotations></annotations>
                                                <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                                <name>k</name>
                                            </parameter>
                                            <parameter>
                                                <comment-header></comment-header>
                                                <annotations></annotations>
                                                <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                                <name>v</name>
                                            </parameter>
                                        </parameters>
                                        <source>&lt;![CDATA[
                                            final XmlStreamWriterConsumer xswcAttributes = xsw -&gt; {
                                            xsw.writeAttribute(k, v);
                                            };
                                            final XmlStreamWriterConsumer xswc = current
                                            .andThen(xswcAttributes);
                                            this.current = xswc;
                                            return this;
                                            ]]&gt;</source>
                                    </method>
                                    <method>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <return-type>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumerTemplates</return-type>
                                        <name>attributes</name>
                                        <parameters>
                                            <parameter>
                                                <comment-header></comment-header>
                                                <annotations></annotations>
                                                <canonical-name>&lt;![CDATA[java.util.Map&lt;java.lang.String,java.lang.String&gt;]]&gt;</canonical-name>
                                                <name>atts</name>
                                            </parameter>
                                        </parameters>
                                        <source>&lt;![CDATA[
                                            final XmlStreamWriterConsumer xswcAttributes = xsw -&gt; {
                                            for (Map.Entry&lt;String, String&gt; e : atts.entrySet()) {
                                            xsw.writeAttribute(e.getKey(), e.getValue());
                                            }
                                            };
                                            final XmlStreamWriterConsumer xswc = current
                                            .andThen(xswcAttributes);
                                            this.current = xswc;
                                            return this;
                                            ]]&gt;</source>
                                    </method>
                                    <method>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <return-type>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumerTemplates</return-type>
                                        <name>nested</name>
                                        <parameters>
                                            <parameter>
                                                <comment-header></comment-header>
                                                <annotations></annotations>
                                                <canonical-name>&lt;![CDATA[org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumer]]&gt;</canonical-name>
                                                <name>inner</name>
                                            </parameter>
                                        </parameters>
                                        <source>&lt;![CDATA[
                                            final XmlStreamWriterConsumer xswc = current
                                            .andThen(inner)
                                            .andThen(xsw -&gt; xsw.writeEndElement());
                                            this.current = xswc;
                                            return this;
                                            ]]&gt;</source>
                                    </method>
                                    <method>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <return-type>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumer</return-type>
                                        <name>build</name>
                                        <parameters></parameters>
                                        <source>&lt;![CDATA[
                                            return this.current;
                                            ]]&gt;</source>
                                    </method>
                                </methods>
                                <inner-classes></inner-classes>
                            </classbody>
                        </class>
                        <class>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>static</modifier>
                            </modifiers>
                            <class>
                                <name>XmlModelSaxWriterFactory</name>
                            </class>
                            <classbody>
                                <fields></fields>
                                <constructors></constructors>
                                <methods>
                                    <method>
                                        <comment-header></comment-header>
                                        <annotations></annotations>
                                        <modifiers></modifiers>
                                        <return-type>org.huberb.prototyping.xml.qdox.XmlSaxWriter</return-type>
                                        <name>create</name>
                                        <parameters>
                                            <parameter>
                                                <comment-header></comment-header>
                                                <annotations></annotations>
                                                <canonical-name>&lt;![CDATA[java.io.Writer]]&gt;</canonical-name>
                                                <name>w</name>
                                            </parameter>
                                        </parameters>
                                        <throws>
                                            <exception>javax.xml.stream.XMLStreamException</exception>
                                        </throws>
                                        <source>&lt;![CDATA[
                                            final XMLOutputFactory xof = XMLOutputFactory.newInstance();
                                            final XMLStreamWriter xsw = xof.createXMLStreamWriter(w);
                                            return new XmlSaxWriter(xsw);
                                            ]]&gt;</source>
                                    </method>
                                </methods>
                                <inner-classes></inner-classes>
                            </classbody>
                        </class>
                    </inner-classes>
                </classbody>
            </class>
        </classes>
    </source>

    <source>
        <url>file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/main/java/org/huberb/prototyping/xml/qdox/XmlStreamWriterEmitter.java</url>
        <package>
            <comment-header></comment-header>
            <annotations></annotations>
            <name>org.huberb.prototyping.xml.qdox</name>
        </package>
        <imports>
            <import>
                <name>java.io.Writer</name>
            </import>
            <import>
                <name>javax.xml.stream.XMLOutputFactory</name>
            </import>
            <import>
                <name>javax.xml.stream.XMLStreamException</name>
            </import>
            <import>
                <name>javax.xml.stream.XMLStreamWriter</name>
            </import>
        </imports>
        <classes>
            <class>
                <comment-header>
                    <doclets>
                        <doclet>
                            <name>author</name>
                            <value>berni3</value>
                        </doclet>
                    </doclets>
                </comment-header>
                <annotations></annotations>
                <modifiers>
                    <modifier>public</modifier>
                </modifiers>
                <class>
                    <name>XmlStreamWriterEmitter</name>
                </class>
                <implements>org.huberb.prototyping.xml.qdox.IGenericXmlEmitter</implements>
                <classbody>
                    <fields>
                        <field>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <type-canonical-name>&lt;![CDATA[javax.xml.stream.XMLStreamWriter]]&gt;</type-canonical-name>
                            <name>xsw</name>
                        </field>
                        <field>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>final</modifier>
                            </modifiers>
                            <type-canonical-name>&lt;![CDATA[java.io.Writer]]&gt;</type-canonical-name>
                            <name>w</name>
                        </field>
                        <field>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>final</modifier>
                            </modifiers>
                            <type-canonical-name>&lt;![CDATA[javax.xml.stream.XMLOutputFactory]]&gt;</type-canonical-name>
                            <name>xof</name>
                            <initialization-expression>XMLOutputFactory.newInstance()</initialization-expression>
                        </field>
                    </fields>
                    <constructors>
                        <constructor>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <name>XmlStreamWriterEmitter</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.io.Writer]]&gt;</canonical-name>
                                    <name>w</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                this.w = w;
                                ]]&gt;</source>
                        </constructor>
                    </constructors>
                    <methods>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>newline</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>startDocument</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[

                                try {
                                this.xsw = xof.createXMLStreamWriter(this.w);
                                this.xsw.writeStartDocument();
                                } catch (XMLStreamException ex) {
                                throw new RuntimeException(ex);
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>endDocument</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                try {
                                this.xsw.writeEndDocument();
                                } catch (XMLStreamException ex) {
                                throw new RuntimeException(ex);
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>write</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[char]]&gt;</canonical-name>
                                    <name>c</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                try {
                                xsw.writeCharacters(new char[]{c}, 0, 1);
                                } catch (XMLStreamException ex) {
                                throw new RuntimeException(ex);
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>write</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>s</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                try {
                                xsw.writeCharacters(s);
                                } catch (XMLStreamException ex) {
                                throw new RuntimeException(ex);
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>writeStartElement</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>elementname</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                try {
                                xsw.writeStartElement(elementname);
                                } catch (XMLStreamException ex) {
                                throw new RuntimeException(ex);
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>writeEndElement</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>elementname</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                try {
                                xsw.writeEndElement();
                                } catch (XMLStreamException ex) {
                                throw new RuntimeException(ex);
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>writeInlineElement</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>elementname</name>
                                </parameter>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String]]&gt;</canonical-name>
                                    <name>value</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                try {
                                xsw.writeStartElement(elementname);
                                xsw.writeCharacters(value);
                                xsw.writeEndElement();
                                } catch (XMLStreamException ex) {
                                throw new RuntimeException(ex);
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@java.lang.Override</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>java.lang.String</return-type>
                            <name>toString</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                return w.toString();
                                ]]&gt;</source>
                        </method>
                    </methods>
                    <inner-classes></inner-classes>
                </classbody>
            </class>
        </classes>
    </source>

    <source>
        <url>file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/main/java/org/huberb/prototyping/xml/trang/TrangMain.java</url>
        <package>
            <comment-header></comment-header>
            <annotations></annotations>
            <name>org.huberb.prototyping.xml.trang</name>
        </package>
        <imports>
            <import>
                <name>com.thaiopensource.relaxng.translate.Driver</name>
            </import>
        </imports>
        <classes>
            <class>
                <comment-header>
                    <doclets>
                        <doclet>
                            <name>author</name>
                            <value>berni3</value>
                        </doclet>
                    </doclets>
                </comment-header>
                <annotations></annotations>
                <modifiers>
                    <modifier>public</modifier>
                </modifiers>
                <class>
                    <name>TrangMain</name>
                </class>
                <classbody>
                    <fields></fields>
                    <constructors></constructors>
                    <methods>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>public</modifier>
                                <modifier>static</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>main</name>
                            <parameters>
                                <parameter>
                                    <comment-header></comment-header>
                                    <annotations></annotations>
                                    <canonical-name>&lt;![CDATA[java.lang.String[]]]&gt;</canonical-name>
                                    <name>args</name>
                                </parameter>
                            </parameters>
                            <source>&lt;![CDATA[
                                new Driver().run(args);
                                ]]&gt;</source>
                        </method>
                    </methods>
                    <inner-classes></inner-classes>
                </classbody>
            </class>
        </classes>
    </source>

    <source>
        <url>file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/test/java/org/huberb/prototyping/xml/qdox/DefaultModelWriterTest.java</url>
        <package>
            <comment-header></comment-header>
            <annotations></annotations>
            <name>org.huberb.prototyping.xml.qdox</name>
        </package>
        <imports>
            <import>
                <name>com.thoughtworks.qdox.JavaProjectBuilder</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.model.JavaPackage</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.model.JavaSource</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.writer.ModelWriter</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.writer.impl.DefaultModelWriter</name>
            </import>
            <import>
                <name>org.junit.jupiter.api.Test</name>
            </import>
            <import>
                <name>java.io.File</name>
            </import>
            <import>
                <name>java.util.Collection</name>
            </import>
        </imports>
        <classes>
            <class>
                <comment-header>
                    <doclets>
                        <doclet>
                            <name>author</name>
                            <value>berni3</value>
                        </doclet>
                    </doclets>
                </comment-header>
                <annotations></annotations>
                <modifiers>
                    <modifier>public</modifier>
                </modifiers>
                <class>
                    <name>DefaultModelWriterTest</name>
                </class>
                <classbody>
                    <fields></fields>
                    <constructors></constructors>
                    <methods>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@org.junit.jupiter.api.Test</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>given_java_sources_then_packages_parsed</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                JavaProjectBuilder builder = new JavaProjectBuilder();
                                File directory = new File("src");
                                builder.addSourceTree(directory);

                                final Collection&lt;JavaPackage&gt; jpCollection = builder.getPackages();
                                jpCollection.forEach(jp -&gt; {
                                System.out.printf("JavaPackage:%s%n", jp.getName());
                                });
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@org.junit.jupiter.api.Test</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>given_java_sources_then_java_sources_parsed</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                JavaProjectBuilder builder = new JavaProjectBuilder();
                                File directory = new File("src");
                                builder.addSourceTree(directory);
                                final Collection&lt;JavaSource&gt; javaSourceCollection = builder.getSources();
                                javaSourceCollection.forEach(source -&gt; {
                                final ModelWriter dmw = new DefaultModelWriter();
                                dmw.writeSource(source);
                                System.out.printf("JavaSource:%n%s%n", dmw.toString());
                                });

                                ]]&gt;</source>
                        </method>
                    </methods>
                    <inner-classes></inner-classes>
                </classbody>
            </class>
        </classes>
    </source>

    <source>
        <url>file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/test/java/org/huberb/prototyping/xml/qdox/XmlSaxModelWriterTest.java</url>
        <package>
            <comment-header></comment-header>
            <annotations></annotations>
            <name>org.huberb.prototyping.xml.qdox</name>
        </package>
        <imports>
            <import>
                <name>com.thoughtworks.qdox.JavaProjectBuilder</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.model.JavaPackage</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.model.JavaSource</name>
            </import>
            <import>
                <name>com.thoughtworks.qdox.writer.ModelWriter</name>
            </import>
            <import>
                <name>org.junit.jupiter.api.Test</name>
            </import>
            <import>
                <name>javax.xml.stream.XMLStreamException</name>
            </import>
            <import>
                <name>java.io.File</name>
            </import>
            <import>
                <name>java.util.Collection</name>
            </import>
        </imports>
        <classes>
            <class>
                <comment-header>
                    <doclets>
                        <doclet>
                            <name>author</name>
                            <value>berni3</value>
                        </doclet>
                    </doclets>
                </comment-header>
                <annotations></annotations>
                <modifiers>
                    <modifier>public</modifier>
                </modifiers>
                <class>
                    <name>XmlSaxModelWriterTest</name>
                </class>
                <classbody>
                    <fields></fields>
                    <constructors></constructors>
                    <methods>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@org.junit.jupiter.api.Test</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>given_java_sources_then_packages_parsed</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                final JavaProjectBuilder builder = new JavaProjectBuilder();
                                final File directory = new File("src");
                                builder.addSourceTree(directory);

                                final Collection&lt;JavaPackage&gt; jpCollection = builder.getPackages();
                                jpCollection.forEach(jp -&gt; System.out.printf("JavaPackage:%s%n", jp.getName()));
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@org.junit.jupiter.api.Test</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>given_java_sources_then_java_sources_parsed</name>
                            <parameters></parameters>
                            <throws>
                                <exception>javax.xml.stream.XMLStreamException</exception>
                            </throws>
                            <source>&lt;![CDATA[
                                final JavaProjectBuilder builder = new JavaProjectBuilder();
                                final File directory = new File("src");
                                builder.addSourceTree(directory);

                                final Collection&lt;JavaSource&gt; javaSourceCollection = builder.getSources();
                                for (final JavaSource source : javaSourceCollection) {
                                final ModelWriter dmw = new XmlSaxModelWriter();
                                dmw.writeSource(source);
                                System.out.printf("JavaSource:%n%s%n", dmw.toString());
                                }

                                ]]&gt;</source>
                        </method>
                    </methods>
                    <inner-classes></inner-classes>
                </classbody>
            </class>
        </classes>
    </source>

    <source>
        <url>file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/test/java/org/huberb/prototyping/xml/qdox/XmlSaxWriterTest.java</url>
        <package>
            <comment-header></comment-header>
            <annotations></annotations>
            <name>org.huberb.prototyping.xml.qdox</name>
        </package>
        <imports>
            <import>
                <name>java.io.IOException</name>
            </import>
            <import>
                <name>java.io.StringWriter</name>
            </import>
            <import>
                <name>javax.xml.stream.XMLStreamException</name>
            </import>
            <import>
                <name>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlModelSaxWriterFactory</name>
            </import>
            <import>
                <name>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumer</name>
            </import>
            <import>
                <name>org.huberb.prototyping.xml.qdox.XmlSaxWriter.XmlStreamWriterConsumerTemplates</name>
            </import>
            <import>
                <name>static org.junit.jupiter.api.Assertions.assertAll</name>
            </import>
            <import>
                <name>static org.junit.jupiter.api.Assertions.assertEquals</name>
            </import>
            <import>
                <name>static org.junit.jupiter.api.Assertions.assertTrue</name>
            </import>
            <import>
                <name>org.junit.jupiter.api.Test</name>
            </import>
        </imports>
        <classes>
            <class>
                <comment-header>
                    <doclets>
                        <doclet>
                            <name>author</name>
                            <value>berni3</value>
                        </doclet>
                    </doclets>
                </comment-header>
                <annotations></annotations>
                <modifiers>
                    <modifier>public</modifier>
                </modifiers>
                <class>
                    <name>XmlSaxWriterTest</name>
                </class>
                <classbody>
                    <fields></fields>
                    <constructors>
                        <constructor>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <name>XmlSaxWriterTest</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                ]]&gt;</source>
                        </constructor>
                    </constructors>
                    <methods>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[Test of accept method, of class XmlSaxWriter.]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@org.junit.jupiter.api.Test</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>testAccept</name>
                            <parameters></parameters>
                            <throws>
                                <exception>javax.xml.stream.XMLStreamException</exception>
                                <exception>java.io.IOException</exception>
                            </throws>
                            <source>&lt;![CDATA[

                                try (final StringWriter sw = new StringWriter()) {
                                try (final XmlSaxWriter instance = new XmlModelSaxWriterFactory().create(sw)) {
                                final XmlStreamWriterConsumer consumer = new XmlStreamWriterConsumerTemplates()
                                .build();
                                instance.accept(consumer);
                                }
                                sw.flush();

                                assertEquals("", sw.toString());
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[Test of accept method, of class XmlSaxWriter.]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@org.junit.jupiter.api.Test</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>testGiven_ElementNameEmpty1_then_xml_docuement_is_okay</name>
                            <parameters></parameters>
                            <throws>
                                <exception>javax.xml.stream.XMLStreamException</exception>
                                <exception>java.io.IOException</exception>
                            </throws>
                            <source>&lt;![CDATA[

                                try (final StringWriter sw = new StringWriter()) {
                                try (final XmlSaxWriter instance = new XmlModelSaxWriterFactory().create(sw)) {
                                final XmlStreamWriterConsumer consumer = new XmlStreamWriterConsumerTemplates()
                                .startDocument()
                                .emptyElement("elementNameEmpty1")
                                .endDocument()
                                .build();
                                instance.accept(consumer);
                                }
                                sw.flush();

                                assertEquals(""
                                + "&lt;?xml version=\"1.0\" ?&gt;"
                                + "&lt;elementNameEmpty1/&gt;", sw.toString());
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[Test of accept method, of class XmlSaxWriter.]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@org.junit.jupiter.api.Test</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>testGiven_LotsOfElementNameEmpty1_then_xml_docuement_is_okay</name>
                            <parameters></parameters>
                            <throws>
                                <exception>javax.xml.stream.XMLStreamException</exception>
                                <exception>java.io.IOException</exception>
                            </throws>
                            <source>&lt;![CDATA[

                                try (final StringWriter sw = new StringWriter()) {
                                try (final XmlSaxWriter instance = new XmlModelSaxWriterFactory().create(sw)) {
                                XmlStreamWriterConsumerTemplates templates = new XmlStreamWriterConsumerTemplates();
                                templates.startDocument();
                                for (int i = 0; i &lt; 100; i += 1) {
                                templates.emptyElement("elementNameEmpty1");
                                }
                                templates.endDocument();
                                XmlStreamWriterConsumer consumer = templates.build();
                                instance.accept(consumer);
                                }
                                sw.flush();

                                assertAll(() -&gt; assertTrue(sw.toString().contains("elementNameEmpty1"))
                                );
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[Test of accept method, of class XmlSaxWriter.]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@org.junit.jupiter.api.Test</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>testGiven_ElementName12_then_xml_docuement_is_okay</name>
                            <parameters></parameters>
                            <throws>
                                <exception>javax.xml.stream.XMLStreamException</exception>
                                <exception>java.io.IOException</exception>
                            </throws>
                            <source>&lt;![CDATA[

                                try (final StringWriter sw = new StringWriter()) {
                                try (final XmlSaxWriter instance = new XmlModelSaxWriterFactory().create(sw)) {
                                final XmlStreamWriterConsumer consumer = new XmlStreamWriterConsumerTemplates()
                                .startDocument()
                                .startElement("elementName1")
                                .nested(new XmlStreamWriterConsumerTemplates()
                                .emptyElement("elementName2")
                                .build()
                                )
                                .endDocument()
                                .build();
                                instance.accept(consumer);
                                }
                                sw.flush();

                                assertEquals(""
                                + "&lt;?xml version=\"1.0\" ?&gt;"
                                + "&lt;elementName1&gt;"
                                + "&lt;elementName2/&gt;"
                                + "&lt;/elementName1&gt;", sw.toString());
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[Test of accept method, of class XmlSaxWriter.]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@org.junit.jupiter.api.Test</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>testGiven_ElementName1Text_then_xml_docuement_is_okay</name>
                            <parameters></parameters>
                            <throws>
                                <exception>javax.xml.stream.XMLStreamException</exception>
                                <exception>java.io.IOException</exception>
                            </throws>
                            <source>&lt;![CDATA[

                                try (final StringWriter sw = new StringWriter()) {
                                try (final XmlSaxWriter instance = new XmlModelSaxWriterFactory().create(sw)) {
                                final XmlStreamWriterConsumer consumer = new XmlStreamWriterConsumerTemplates()
                                .startDocument()
                                .startElement("elementName1")
                                .text("Text")
                                .endElement()
                                .endDocument()
                                .build();
                                instance.accept(consumer);
                                }
                                sw.flush();

                                assertEquals(""
                                + "&lt;?xml version=\"1.0\" ?&gt;"
                                + "&lt;elementName1&gt;"
                                + "Text"
                                + "&lt;/elementName1&gt;", sw.toString());
                                }
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header>
                                <comment>&lt;![CDATA[Test of accept method, of class XmlSaxWriter.]]&gt;</comment>
                            </comment-header>
                            <annotations>
                                <annotation>
                                    <name>@org.junit.jupiter.api.Test</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>testGiven_ElementName1AttributesText_then_xml_docuement_is_okay</name>
                            <parameters></parameters>
                            <throws>
                                <exception>javax.xml.stream.XMLStreamException</exception>
                                <exception>java.io.IOException</exception>
                            </throws>
                            <source>&lt;![CDATA[

                                try (final StringWriter sw = new StringWriter()) {
                                try (final XmlSaxWriter instance = new XmlModelSaxWriterFactory().create(sw)) {
                                final XmlStreamWriterConsumer consumer = new XmlStreamWriterConsumerTemplates()
                                .startDocument()
                                .startElement("elementName1")
                                .attributes("attKey", "attValue")
                                .text("Text")
                                .endElement()
                                .endDocument()
                                .build();
                                instance.accept(consumer);
                                }
                                sw.flush();

                                assertEquals(""
                                + "&lt;?xml version=\"1.0\" ?&gt;"
                                + "&lt;elementName1 attKey=\"attValue\"&gt;"
                                + "Text"
                                + "&lt;/elementName1&gt;",
                                sw.toString());
                                }
                                ]]&gt;</source>
                        </method>
                    </methods>
                    <inner-classes></inner-classes>
                </classbody>
            </class>
        </classes>
    </source>

    <source>
        <url>file:/C:/Users/berni3/Documents/GitHub/prototyping/xml/src/test/java/org/huberb/prototyping/xml/trang/DriverTest.java</url>
        <package>
            <comment-header></comment-header>
            <annotations></annotations>
            <name>org.huberb.prototyping.xml.trang</name>
        </package>
        <imports>
            <import>
                <name>com.thaiopensource.relaxng.translate.Driver</name>
            </import>
            <import>
                <name>com.thaiopensource.xml.sax.ErrorHandlerImpl</name>
            </import>
            <import>
                <name>java.io.StringWriter</name>
            </import>
            <import>
                <name>static org.junit.jupiter.api.Assertions.assertEquals</name>
            </import>
            <import>
                <name>org.junit.jupiter.api.Test</name>
            </import>
        </imports>
        <classes>
            <class>
                <comment-header>
                    <doclets>
                        <doclet>
                            <name>author</name>
                            <value>berni3</value>
                        </doclet>
                    </doclets>
                </comment-header>
                <annotations></annotations>
                <modifiers>
                    <modifier>public</modifier>
                </modifiers>
                <class>
                    <name>DriverTest</name>
                </class>
                <classbody>
                    <fields></fields>
                    <constructors>
                        <constructor>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <name>DriverTest</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                ]]&gt;</source>
                        </constructor>
                    </constructors>
                    <methods>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@org.junit.jupiter.api.Test</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>testPomXml2Rnc</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[

                                final Driver driver = createDriver();
                                final String[] args = {
                                "pom.xml",
                                "target/pom_xml.rnc"
                                };
                                int rc = driver.run(args);
                                assertEquals(0, rc);
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations>
                                <annotation>
                                    <name>@org.junit.jupiter.api.Test</name>
                                </annotation>
                            </annotations>
                            <modifiers>
                                <modifier>public</modifier>
                            </modifiers>
                            <return-type>void</return-type>
                            <name>testPomXml2Xsd</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[

                                final Driver driver = createDriver();
                                final String[] args = {
                                "pom.xml",
                                "target/pom_xml.xsd"
                                };
                                int rc = driver.run(args);
                                assertEquals(0, rc);
                                ]]&gt;</source>
                        </method>
                        <method>
                            <comment-header></comment-header>
                            <annotations></annotations>
                            <modifiers></modifiers>
                            <return-type>com.thaiopensource.relaxng.translate.Driver</return-type>
                            <name>createDriver</name>
                            <parameters></parameters>
                            <source>&lt;![CDATA[
                                final Driver driver;
                                if (1 == 1) {
                                driver = new Driver();
                                } else {
                                final StringWriter sw = new StringWriter();
                                final ErrorHandlerImpl errorHandlerImpl = new ErrorHandlerImpl(sw);
                                driver = new Driver(errorHandlerImpl);
                                }
                                return driver;
                                ]]&gt;</source>
                        </method>
                    </methods>
                    <inner-classes></inner-classes>
                </classbody>
            </class>
        </classes>
    </source>
</root>
